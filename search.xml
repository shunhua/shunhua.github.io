<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>9段PHP实用功能的代码推荐</title>
    <url>/2018/02/24/9%E6%AE%B5PHP%E5%AE%9E%E7%94%A8%E5%8A%9F%E8%83%BD%E7%9A%84%E4%BB%A3%E7%A0%81%E6%8E%A8%E8%8D%90/</url>
    <content><![CDATA[<a id="more"></a>

<blockquote>
<p> 一、查看邮件是否已被阅读</p>
</blockquote>
<p>当你在发送邮件时，你或许很想知道该邮件是否被对方已阅读。这里有段非常有趣的代码片段能够显示对方IP地址记录阅读的实际日期和时间。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">Header(&quot;Content-Type: image&#x2F;jpeg&quot;);</span><br><span class="line">&#x2F;&#x2F;Get IP</span><br><span class="line">if (!empty($_SERVER[&#39;HTTP_CLIENT_IP&#39;]))</span><br><span class="line">&#123;</span><br><span class="line"> $ip&#x3D;$_SERVER[&#39;HTTP_CLIENT_IP&#39;];</span><br><span class="line">&#125;</span><br><span class="line">elseif (!empty($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]))</span><br><span class="line">&#123;</span><br><span class="line"> $ip&#x3D;$_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;];</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line"> $ip&#x3D;$_SERVER[&#39;REMOTE_ADDR&#39;];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;Time</span><br><span class="line">$actual_time &#x3D; time();</span><br><span class="line">$actual_day &#x3D; date(&#39;Y.m.d&#39;, $actual_time);</span><br><span class="line">$actual_day_chart &#x3D; date(&#39;d&#x2F;m&#x2F;y&#39;, $actual_time);</span><br><span class="line">$actual_hour &#x3D; date(&#39;H:i:s&#39;, $actual_time);</span><br><span class="line">&#x2F;&#x2F;GET Browser</span><br><span class="line">$browser &#x3D; $_SERVER[&#39;HTTP_USER_AGENT&#39;];</span><br><span class="line">&#x2F;&#x2F;LOG</span><br><span class="line">$myFile &#x3D; &quot;log.txt&quot;;</span><br><span class="line">$fh &#x3D; fopen($myFile, &#39;a+&#39;);</span><br><span class="line">$stringData &#x3D; $actual_day . &#39; &#39; . $actual_hour . &#39; &#39; . $ip . &#39; &#39; . $browser . &#39; &#39; . &quot;\r\n&quot;;</span><br><span class="line">fwrite($fh, $stringData);</span><br><span class="line">fclose($fh);</span><br><span class="line">&#x2F;&#x2F;Generate Image (Es. dimesion is 1x1)</span><br><span class="line">$newimage &#x3D; ImageCreate(1,1);</span><br><span class="line">$grigio &#x3D; ImageColorAllocate($newimage,255,255,255);</span><br><span class="line">ImageJPEG($newimage);</span><br><span class="line">ImageDestroy($newimage);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 二、从网页中提取关键字</p>
</blockquote>
<p>一段伟大的代码片段能够轻松的从网页中提取关键字。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$meta &#x3D; get_meta_tags(&#39;http:&#x2F;&#x2F;www.emoticode.net&#x2F;&#39;);</span><br><span class="line">$keywords &#x3D; $meta[&#39;keywords&#39;];</span><br><span class="line">&#x2F;&#x2F; Split keywords</span><br><span class="line">$keywords &#x3D; explode(&#39;,&#39;, $keywords );</span><br><span class="line">&#x2F;&#x2F; Trim them</span><br><span class="line">$keywords &#x3D; array_map( &#39;trim&#39;, $keywords );</span><br><span class="line">&#x2F;&#x2F; Remove empty values</span><br><span class="line">$keywords &#x3D; array_filter( $keywords );</span><br><span class="line">print_r( $keywords );</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 三、查找页面上的所有链接</p>
</blockquote>
<p>使用DOM，你可以轻松从任何页面上抓取链接，代码示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$html &#x3D; file_get_contents(&#39;http:&#x2F;&#x2F;www.example.com&#39;);</span><br><span class="line">$dom &#x3D; new DOMDocument();</span><br><span class="line">@$dom-&gt;loadHTML($html);</span><br><span class="line">&#x2F;&#x2F; grab all the on the page</span><br><span class="line">$xpath &#x3D; new DOMXPath($dom);</span><br><span class="line">$hrefs &#x3D; $xpath-&gt;evaluate(&quot;&#x2F;html&#x2F;body&#x2F;&#x2F;a&quot;);</span><br><span class="line"></span><br><span class="line">for ($i &#x3D; 0; $i &lt; $hrefs-&gt;length; $i++) &#123;</span><br><span class="line">      $href &#x3D; $hrefs-&gt;item($i);</span><br><span class="line">      $url &#x3D; $href-&gt;getAttribute(&#39;href&#39;);</span><br><span class="line">      echo $url.&#39;&lt;br &#x2F;&gt;&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 四、自动转换URL，跳转至超链接</p>
</blockquote>
<p>在WordPress中，如果你想自动转换URL，跳转至超链接页面，你可以利用内置的函数make_clickable()执行此操作。如果你想基于WordPress之外操作该程序，那么你可以参考wp-includes/formatting.php源代码。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function _make_url_clickable_cb($matches) &#123;</span><br><span class="line">   $ret &#x3D; &#39;&#39;;</span><br><span class="line">   $url &#x3D; $matches[2];</span><br><span class="line"></span><br><span class="line">   if ( empty($url) )</span><br><span class="line">       return $matches[0];</span><br><span class="line">   &#x2F;&#x2F; removed trailing [.,;:] from URL</span><br><span class="line">   if ( in_array(substr($url, -1), array(&#39;.&#39;, &#39;,&#39;, &#39;;&#39;, &#39;:&#39;)) &#x3D;&#x3D;&#x3D; true ) &#123;</span><br><span class="line">       $ret &#x3D; substr($url, -1);</span><br><span class="line">       $url &#x3D; substr($url, 0, strlen($url)-1);</span><br><span class="line">   &#125;</span><br><span class="line">   return $matches[1] . &quot;&lt;a href&#x3D;\&quot;$url\&quot; rel&#x3D;\&quot;nofollow\&quot;&gt;$url&lt;&#x2F;a&gt;&quot; . $ret;</span><br><span class="line">&#125;</span><br><span class="line">function _make_web_ftp_clickable_cb($matches) &#123;</span><br><span class="line">   $ret &#x3D; &#39;&#39;;</span><br><span class="line">   $dest &#x3D; $matches[2];</span><br><span class="line">   $dest &#x3D; &#39;http:&#x2F;&#x2F;&#39; . $dest;</span><br><span class="line">   if ( empty($dest) )</span><br><span class="line">       return $matches[0];</span><br><span class="line">   &#x2F;&#x2F; removed trailing [,;:] from URL</span><br><span class="line">   if ( in_array(substr($dest, -1), array(&#39;.&#39;, &#39;,&#39;, &#39;;&#39;, &#39;:&#39;)) &#x3D;&#x3D;&#x3D; true ) &#123;</span><br><span class="line">       $ret &#x3D; substr($dest, -1);</span><br><span class="line">       $dest &#x3D; substr($dest, 0, strlen($dest)-1);</span><br><span class="line">   &#125;</span><br><span class="line">   return $matches[1] . &quot;&lt;a href&#x3D;\&quot;$dest\&quot; rel&#x3D;\&quot;nofollow\&quot;&gt;$dest&lt;&#x2F;a&gt;&quot; . $ret;</span><br><span class="line">&#125;</span><br><span class="line">function _make_email_clickable_cb($matches) &#123;</span><br><span class="line">   $email &#x3D; $matches[2] . &#39;@&#39; . $matches[3];</span><br><span class="line">   return $matches[1] . &quot;&lt;a href&#x3D;\&quot;mailto:$email\&quot;&gt;$email&lt;&#x2F;a&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">function make_clickable($ret) &#123;</span><br><span class="line">   $ret &#x3D; &#39; &#39; . $ret;</span><br><span class="line">   &#x2F;&#x2F; in testing, using arrays here was found to be faster</span><br><span class="line">   $ret &#x3D; preg_replace_callback(&#39;#([\s&gt;])([\w]+?:&#x2F;&#x2F;[\w\\x80-\\xff\#$%&amp;~&#x2F;.\-;:&#x3D;,?@\[\]+]*)#is&#39;, &#39;_make_url_clickable_cb&#39;, $ret);</span><br><span class="line">   $ret &#x3D; preg_replace_callback(&#39;#([\s&gt;])((www|ftp)\.[\w\\x80-\\xff\#$%&amp;~&#x2F;.\-;:&#x3D;,?@\[\]+]*)#is&#39;, &#39;_make_web_ftp_clickable_cb&#39;, $ret);</span><br><span class="line">   $ret &#x3D; preg_replace_callback(&#39;#([\s&gt;])([.0-9a-z_+-]+)@(([0-9a-z-]+\.)+[0-9a-z]&#123;2,&#125;)#i&#39;, &#39;_make_email_clickable_cb&#39;, $ret);</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; this one is not in an array because we need it to run last, for cleanup of accidental links within links</span><br><span class="line">   $ret &#x3D; preg_replace(&quot;#(&lt;a( [^&gt;]+?&gt;|&gt;))&lt;a [^&gt;]+?&gt;([^&gt;]+?)&lt;&#x2F;a&gt;&lt;&#x2F;a&gt;#i&quot;, &quot;$1$3&lt;&#x2F;a&gt;&quot;, $ret);</span><br><span class="line">   $ret &#x3D; trim($ret);</span><br><span class="line">   return $ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 五、创建数据URL</p>
</blockquote>
<p>数据URL可以直接嵌入到HTML/CSS/JS中，以节省大量的 HTTP请求。 下面的这段代码可利用$file轻松创建数据URL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function data_uri($file, $mime) &#123;</span><br><span class="line"> $contents&#x3D;file_get_contents($file);</span><br><span class="line"> $base64&#x3D;base64_encode($contents);</span><br><span class="line"> echo &quot;data:$mime;base64,$base64&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 六、从服务器上下载&amp;保存一个远程图片</p>
</blockquote>
<p>当你在搭建网站时，从远程服务器下载某张图片并且将其保存在自己的服务器上，这一操作会经常用到。代码如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$image &#x3D; file_get_contents(&#39;http:&#x2F;&#x2F;www.url.com&#x2F;image.jpg&#39;);</span><br><span class="line">file_put_contents(&#39;&#x2F;images&#x2F;image.jpg&#39;, $image); &#x2F;&#x2F;Where to save the image</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 七、移除Remove Microsoft Word HTML Tag</p>
</blockquote>
<p>当你使用Microsoft Word会创建许多Tag，比如font，span，style，class等。这些标签对于Word本身而言是非常有用的，但是当你从Word粘贴至网页时，你会发现很多无用的Tag。因此，下面的这段代码可帮助你删除所有无用的Word HTML Tag。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function cleanHTML($html) &#123;</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; Removes all FONT and SPAN tags, and all Class and Style attributes.</span><br><span class="line">&#x2F;&#x2F;&#x2F; Designed to get rid of non-standard Microsoft Word HTML tags.</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">&#x2F;&#x2F; start by completely removing all unwanted tags</span><br><span class="line"></span><br><span class="line">$html &#x3D; ereg_replace(&quot;&lt;(&#x2F;)?(font|span|del|ins)[^&gt;]*&gt;&quot;,&quot;&quot;,$html);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; then run another pass over the html (twice), removing unwanted attributes</span><br><span class="line"></span><br><span class="line">$html &#x3D; ereg_replace(&quot;&lt;([^&gt;]*)(class|lang|style|size|face)&#x3D;(&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&gt;]+)([^&gt;]*)&gt;&quot;,&quot;&lt;\1&gt;&quot;,$html);</span><br><span class="line">$html &#x3D; ereg_replace(&quot;&lt;([^&gt;]*)(class|lang|style|size|face)&#x3D;(&quot;[^&quot;]*&quot;|&#39;[^&#39;]*&#39;|[^&gt;]+)([^&gt;]*)&gt;&quot;,&quot;&lt;\1&gt;&quot;,$html);</span><br><span class="line">return $html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 八、检测浏览器语言</p>
</blockquote>
<p>如果你的网站上有多种语言，那么可以使用这段代码作为默认的语言来检测浏览器语言。该段代码将返回浏览器客户端使用的初始语言。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function get_client_language($availableLanguages, $default&#x3D;&#39;en&#39;)&#123;</span><br><span class="line">   if (isset($_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;])) &#123;</span><br><span class="line">       $langs&#x3D;explode(&#39;,&#39;,$_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;]);</span><br><span class="line"></span><br><span class="line">       foreach ($langs as $value)&#123;</span><br><span class="line">           $choice&#x3D;substr($value,0,2);</span><br><span class="line">           if(in_array($choice, $availableLanguages))&#123;</span><br><span class="line">               return $choice;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125; </span><br><span class="line">   return $default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 九、显示Facebook 粉丝数量 </p>
</blockquote>
<p>如果你的网站或者博客上有内链的Facebook页面，你或许想知道拥有多少粉丝。这段代码将帮助你查看Facebook粉丝数，记住，别忘了在你的页面ID第二行添加该段代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">   $page_id &#x3D; &quot;YOUR PAGE-ID&quot;;</span><br><span class="line">   $xml &#x3D; @simplexml_load_file(&quot;http:&#x2F;&#x2F;api.facebook.com&#x2F;restserver.php?method&#x3D;facebook.fql.query&amp;query&#x3D;SELECT%20fan_count%20FROM%20page%20WHERE%20page_id&#x3D;&quot;.$page_id.&quot;&quot;) or die (&quot;a lot&quot;);</span><br><span class="line">   $fans &#x3D; $xml-&gt;page-&gt;fan_count;</span><br><span class="line">   echo $fans;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


<hr>
<ul>
<li><strong>Notice</strong></li>
</ul>
<blockquote>
<p>   如若需要，请戳 <a href="https://shunhua.github.io/about/" target="_blank">[ About ]</a> 下联系我 欢迎联系.ok,enjoy it ! ~~</p>
</blockquote>
]]></content>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Alipay 开放平台支付</title>
    <url>/2018/10/26/Alipay-%E5%BC%80%E6%94%BE%E5%B9%B3%E5%8F%B0%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<a id="more"></a>


<p>参考文档 <a href="https://docs.open.alipay.com/291/" target="_blank">[ 开放平台文档中心 ]</a></p>
<blockquote>
<p>生成RSA密钥</p>
</blockquote>
<p>a. 应用公钥2048<br>b. 应用私钥2048</p>
<blockquote>
<p>上传应用公钥并获取支付宝公钥</p>
</blockquote>
<p>支付宝公钥应用于开发中</p>
<blockquote>
<p>使用应用私钥生成请求签名</p>
</blockquote>
<p>应用私钥应用于开发中</p>
<blockquote>
<p>使用支付宝公钥验签</p>
</blockquote>
<p>支付宝公钥应用于开发中</p>
]]></content>
      <tags>
        <tag>Alipay</tag>
        <tag>开放平台</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 Git服务器搭建及配置公钥</title>
    <url>/2018/04/08/CentOS-7-Git%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE%E5%85%AC%E9%92%A5/</url>
    <content><![CDATA[<a id="more"></a>

<p><strong>一、Git服务器搭建</strong></p>
<p>a. 安装Git</p>
<blockquote>
<p>yum install -y git</p>
</blockquote>
<p>b. 添加新用户、为用户设置密码</p>
<blockquote>
<p>adduser git<br>passwd git</p>
</blockquote>
<p>c. 创建空的Git仓库</p>
<blockquote>
<p>cd /home/git<br>git init --bare test.git<br>chown -R git:git ../git</p>
</blockquote>
<p>d. 在服务器端打开RSA认证</p>
<blockquote>
<p>cd /home/git<br>mkdir .ssh<br>cd .ssh<br>touch authorized_keys </p>
</blockquote>
<p>e. 命令行创建SSH key</p>
<blockquote>
<p>ssh-keygen -t rsa -C “<a href="mailto:&#120;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;">&#120;&#x40;&#x71;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a>“</p>
</blockquote>
<p>Linux  家目录/.ssh/:id_rsa、id_rsa.pub。<br>windows C:\Users\Administrator.ssh\</p>
<p>f.把步骤5生成的公钥导入服务器</p>
<blockquote>
<p>cat id_rsa.pub &gt;&gt; /home/git/.ssh/authorized_keys</p>
</blockquote>
<p>简单操作：windows 打开 Git-Gui-&gt;Help-&gt;Show SSH Key 直接复制key到Linux authorized_keys文件中 </p>
<p><strong>二、配置钩子</strong></p>
<p>a. 设置clone帐号的SSH key<br>我用的lnmp的环境 用户为 www</p>
<blockquote>
<p>sudo -u www ssh-keygen -t rsa -C “<a href="mailto:&#98;&#64;&#113;&#x71;&#46;&#x63;&#x6f;&#x6d;">&#98;&#64;&#113;&#x71;&#46;&#x63;&#x6f;&#x6d;</a>“<br>cat id_rsa.pub &gt;&gt; /home/git/.ssh/authorized_keys</p>
</blockquote>
<p>b. 设置Git用户使用www用户clone<br>设置了 /etc/sudoers 添加：</p>
<blockquote>
<p>git ALL=(ALL) NOPASSWD: ALL</p>
</blockquote>
<p>进入网站目录拉取<br>su git<br>sudo -u www git clone ssh://git@127.0.0.1/home/git/test.git </p>
<p>c. 配置钩子[主要]</p>
<blockquote>
<p>cd /home/git/test.git/hooks/<br>vim post-receive</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">export LANG&#x3D;zh_CN.UTF-8</span><br><span class="line">cd &#x2F;home&#x2F;wwwroot&#x2F;www&#x2F;test&#x2F;</span><br><span class="line">unset GIT_DIR </span><br><span class="line">sudo -u www git pull origin master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>chown git:git post-receive<br>chmod +x post-receive</p>
</blockquote>
<p>在本地clone拉取远程git仓库</p>
<blockquote>
<p>git clone ssh://git@127.0.0.1/home/git/test.git</p>
</blockquote>
<p><strong>git 回滚到任意版本操作</strong></p>
<blockquote>
<p>git reset –hard xxx[版本号]<br>git push -f origin master</p>
</blockquote>
<p><strong>git known_hosts</strong></p>
<blockquote>
<p>sudo -u www ssh-keygen -R 127.0.0.1<br>sudo -u www git pull origin master</p>
</blockquote>
]]></content>
      <tags>
        <tag>CentOS 7</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装MySQL5.7</title>
    <url>/2018/03/21/CentOS-7-%E5%AE%89%E8%A3%85MySQL5-7/</url>
    <content><![CDATA[<p><strong>Centos下安装MySQL</strong> </p>
<a id="more"></a>
<p>官方mysql.com 支持我们使用yum的方式安装mysql 5.7最新版。所以大家根本无需手工编译安装（除非你需要）。CentOS7的yum源中默认好像是没有mysql的。为了解决这个问题，我们要先下载mysql的repo源。<br>一、下载mysql的repo源</p>
<blockquote>
<p>wget <a href="http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm">http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</a></p>
</blockquote>
<p>二、 安装mysql57-community-release-el7-9.noarch.rpm包</p>
<blockquote>
<p>rpm -ivh mysql57-community-release-el7-9.noarch.rpm</p>
</blockquote>
<p>三、 安装mysql （下载需要一段时间)</p>
<blockquote>
<p>yum install mysql-community-server</p>
</blockquote>
<p>四、启动mysql</p>
<blockquote>
<p>systemctl start mysqld<br>systemctl enable mysqld.service</p>
</blockquote>
<p>五、第一次启动后，mysql5.7 会生成一个随机root密码 （MySQL 5.7.6以上）</p>
<blockquote>
<p>grep ‘temporary passwor’ /var/log/mysqld.log</p>
</blockquote>
<p>修改root密码</p>
<blockquote>
<p>ALTER USER USER() IDENTIFIED BY ‘123456’;</p>
</blockquote>
<p>外网访问</p>
<blockquote>
<p>mysql -u root -p  # 首次登录会修改密码<br>GRANT ALL PRIVILEGES ON <em>.</em> TO ‘root’@’%’ IDENTIFIED BY ‘your_root_password’ WITH GRANT OPTION;</p>
</blockquote>
<p>删除mysql</p>
<blockquote>
<p>rpm -qa|grep mysql；<br>yum remove packages</p>
</blockquote>
<p>端口查看</p>
<blockquote>
<p>ps -aux | grep mysql<br>netstat -apn | grep 3306<br>netstat -apn</p>
</blockquote>
]]></content>
      <tags>
        <tag>Centos</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 安装 Nginx 1.11.x</title>
    <url>/2018/03/21/CentOS-7-%E5%AE%89%E8%A3%85-Nginx-1-11-x/</url>
    <content><![CDATA[<p><strong>Centos下安装Nginx</strong> </p>
<a id="more"></a>

<p>一、准备工作 安装必备工具</p>
<blockquote>
<p>yum install -y gcc gcc-c++ autoconf automake<br>yum install -y zlib zlib-devel openssl openssl-devel pcre-devel</p>
</blockquote>
<p>不安装这些依赖库，后面编译的时候会报错，当然你的系统已经有这些包可以跳过。<br>pcre：用来作地址重写的功能。<br>zlib：nginx 的gzip模块,传输数据打包，省流量（但消耗资源）。<br>openssl：提供ssl加密协议。</p>
<p>二、添加nginx用户</p>
<blockquote>
<p>/usr/sbin/groupadd -f www<br>/usr/sbin/useradd -g www www</p>
</blockquote>
<p>三、nginx文件准备及编译</p>
<blockquote>
<p>wget <a href="http://nginx.org/download/nginx-1.11.4.tar.gz">http://nginx.org/download/nginx-1.11.4.tar.gz</a><br>tar -zxvf nginx-1.11.4.tar.gz<br>cd nginx-1.11.4/<br>./configure –user=www –group=www<br>make &amp;&amp; make install</p>
</blockquote>
<p>四、开始firewall端口服务</p>
<blockquote>
<p>firewall-cmd  –permanent –zone=public –add-service=http<br>firewall-cmd  –reload</p>
</blockquote>
<p>常用命令</p>
<blockquote>
<p>/usr/local/nginx/sbin/nginx -s reload<br>/usr/local/nginx/sbin/nginx -s stop<br>/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</p>
</blockquote>
]]></content>
      <tags>
        <tag>Centos</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 搭建SVN服务器</title>
    <url>/2017/09/14/CentOS-7-%E6%90%AD%E5%BB%BASVN%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CentOS 7 搭建SVN服务器</strong> </p>
<a id="more"></a>


<p><strong>一、安装subversion</strong></p>
<blockquote>
<p> yum -y install subversion</p>
</blockquote>
<p><strong>二、配置svn</strong></p>
<p>a.建立仓库[repos]</p>
<blockquote>
<p> mkdir -p /home/svn/repos<br> svnadmin create /home/svn/repos/<br> cd /home/svn/repos/conf</p>
</blockquote>
<p>b.添加用户</p>
<blockquote>
<p>vi passwd</p>
</blockquote>
<p>例：添加</p>
<blockquote>
<p> test = 123456  </p>
</blockquote>
<p>c.添加用户权限</p>
<blockquote>
<p>vim authz</p>
</blockquote>
<p>添加</p>
<blockquote>
<p>[/]<br>test = rw</p>
</blockquote>
<p>d.配置文件</p>
<blockquote>
<p>vim svnserve.conf</p>
</blockquote>
<p>修改配置[启用]</p>
<blockquote>
<p>anon-access = none<br>auth-access = write       # 授权用户可写<br>password-db = passwd      # 使用哪个文件作为账号文件<br>authz-db = authz            # 使用哪个文件作为权限文件<br>realm = /home/svn/repos   # 认证空间名，版本库所在目录</p>
</blockquote>
<p>e.启动svn</p>
<blockquote>
<p>svnserve -d -r /home/svn   # 启动svn版本库<br>svnserve -d -r /home/svn/repos   # 启动svn版本库<br>killall svnserve   # 停止SVN命令</p>
</blockquote>
<p><strong>三.钩子文件</strong></p>
<p>1.钩子配置</p>
<blockquote>
<p>cd ../hooks/<br>cp post-commit.tmpl post-commit<br>chmod +x post-commit<br>vim post-commit</p>
</blockquote>
<p>2.钩子脚本修改</p>
<blockquote>
<p>WEBPATH=”/home/wwwroot/test/“ # 网站目录<br>export.UTF-8<br>svn update $WEBPATH –username[test] username –password password[123456] –no-auth-cache</p>
</blockquote>
<p>3.拉取文件[在有副本的目录下]</p>
<blockquote>
<p>svn co svn://127.0.0.1/ ./<br>若拉取文件报错,请在有副本目录下拉取一下,然后把隐藏的文件夹 .svn文件放到需要拉取的目录下 就Ok了.</p>
</blockquote>
<p>4.拉取单个文件</p>
<blockquote>
<p>svn up laravel.log</p>
</blockquote>
<hr>
<ul>
<li><strong>Notice</strong></li>
</ul>
<blockquote>
<p>   本地拉取时  checkout地址 svn://ip/repos</p>
</blockquote>
<blockquote>
<p>   如若需要，请戳 <a href="https://shunhua.github.io/about/" target="_blank">[ About ]</a> 下联系我 欢迎联系.ok,enjoy it ！！！ </p>
</blockquote>
]]></content>
      <tags>
        <tag>CentOS 7</tag>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos下两种守护进程的配置</title>
    <url>/2018/03/21/Centos%E4%B8%8B%E4%B8%A4%E7%A7%8D%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<a id="more"></a>


<blockquote>
<p>一、php artisan</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:laravel-worker-xx]</span><br><span class="line">process_name&#x3D;%(program_name)s_%(process_num)02d</span><br><span class="line">command&#x3D;php &#x2F;home&#x2F;wwwroot&#x2F;www.xxx.com&#x2F;artisan queue:work --tries&#x3D;3</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">autorestart&#x3D;true</span><br><span class="line">user&#x3D;www</span><br><span class="line">numprocs&#x3D;4</span><br><span class="line">redirect_stderr&#x3D;true</span><br><span class="line">stdout_logfile&#x3D;&#x2F;home&#x2F;wwwroot&#x2F;www.xxx.com&#x2F;storage&#x2F;logs&#x2F;worker.log</span><br></pre></td></tr></table></figure>

<blockquote>
<p>二、执行node js </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:laravel-worker-node]</span><br><span class="line">process_name&#x3D;%(program_name)s_%(process_num)02d</span><br><span class="line">command&#x3D; node &#x2F;home&#x2F;socket&#x2F;stocket.js</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">autorestart&#x3D;true</span><br><span class="line">user&#x3D;www</span><br><span class="line">numprocs&#x3D;1</span><br><span class="line">redirect_stderr&#x3D;true</span><br><span class="line">stdout_logfile&#x3D;&#x2F;home&#x2F;wwwroot&#x2F;www.xx.com&#x2F;storage&#x2F;logs&#x2F;worker.log</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7下基于laradock部署laravel5.x</title>
    <url>/2018/04/09/Centos7%E4%B8%8B%E5%9F%BA%E4%BA%8Elaradock%E9%83%A8%E7%BD%B2laravel5-x/</url>
    <content><![CDATA[<a id="more"></a>

<p><strong>一、安装docker</strong></p>
<p>Go to：<a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/" target="_blank">[ .rpm安装路径 ]</a> <a href="https://docs.docker.com/engine/installation/linux/docker-ce/centos/#install-using-the-repository" target="_blank">[ 官方参考 ]</a><br><img src="/assets/blogImg/laradock/1.png" alt="ico原来的样子"></p>
<p>打开路径地址，本文默认安装选择最新版，<br><img src="/assets/blogImg/laradock/2.png" alt="ico原来的样子"><br>下载rpm安装包</p>
<blockquote>
<p> wget <a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.09.0.ce-1.el7.centos.x86_64.rpm">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-17.09.0.ce-1.el7.centos.x86_64.rpm</a></p>
</blockquote>
<p>安装 Docker CE,执行命令</p>
<blockquote>
<p> $ sudo yum install docker-ce-17.09.0.ce-1.el7.centos.x86_64.rpm<br>或者 yum install /path/to/package.rpm  </p>
</blockquote>
<p>启动docker –hello[docker run hello-world]</p>
<blockquote>
<p> systemctl start docker<br>systemctl enable docker 开机启动</p>
</blockquote>
<p><strong>二、CentOS 7配置中国镜像</strong></p>
<p><a href="https://yq.aliyun.com/articles/29941" target="_blank">[ 参考配置原文 ]</a> docker –registry-mirror=<a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a> daemon [提示找不到registry]</p>
<ul>
<li>CentOS的配置方式略微复杂，需要先将默认的配置文件复制出来</li>
<li>/lib/systemd/system/docker.service -&gt; /etc/systemd/system/docker.service</li>
<li>然后再将加速器地址添加到配置文件的启动命令</li>
<li>重启Docker就可以了。</li>
</ul>
<blockquote>
<ul>
<li>sudo cp -n /lib/systemd/system/docker.service /etc/systemd/system/docker.service</li>
<li>sudo sed -i “s|ExecStart=/usr/bin/docker daemon|ExecStart=/usr/bin/docker daemon –registry-mirror=<a href="https://registry.docker-cn.com|g&quot;/">https://registry.docker-cn.com|g&quot;</a> /etc/systemd/system/docker.service</li>
<li>sudo sed -i “s|ExecStart=/usr/bin/dockerd|ExecStart=/usr/bin/dockerd –registry-mirror=<a href="https://registry.docker-cn.com|g&quot;/">https://registry.docker-cn.com|g&quot;</a> /etc/systemd/system/docker.service</li>
<li>sudo systemctl daemon-reload</li>
<li>sudo systemctl restart docker  </li>
</ul>
</blockquote>
<p>docker 安装完成！！！</p>
<p><strong>三、拉取 Laradock</strong></p>
<ul>
<li>目录路径[/home/]</li>
<li>git clone <a href="https://github.com/Laradock/laradock.git">https://github.com/Laradock/laradock.git</a>  </li>
<li>cp env-example .env </li>
<li>docker-compose up -d nginx mysql phpmyadmin</li>
<li>访问phpmyadmin[<a href="http://ip:8080/]%E9%BB%98%E8%AE%A4%E5%80%BC%E4%B8%BA">http://ip:8080/]默认值为</a>  服务器[mysql] 账号[root] 密码[root]</li>
<li>获取laradock[/home/laradock]后 在同级下创建项目目录[/home/www]</li>
<li>修改[/home/laradock/.env]APPLICATION=../www/</li>
<li>[/home/laradock]下使用root用户docker-compose exec workspace bash</li>
<li>[/home/laradock]下使用laradock用户  docker-compose exec –user=laradock workspace bash</li>
<li>配置中国镜像 composer config -g repo.packagist composer <a href="https://packagist.phpcomposer.com/">https://packagist.phpcomposer.com</a></li>
<li>创建laravel composer create-project laravel/laravel my-app</li>
</ul>
<blockquote>
<p> 安装SVN 配置钩子文件到 [/home/www]  </p>
</blockquote>
<p><a href="https://lisonghe.com/detail/19" target="_blank">[ svn安装文档参考 ]</a> </p>
<blockquote>
<p> 安装SVN成功后,服务器开启端口权限，上传代码,修改数据库配置，导入数据库</p>
</blockquote>
<hr>
<ul>
<li><strong>Notice</strong></li>
</ul>
<blockquote>
<p>   如若需要，请戳 <a href="https://shunhua.github.io/about/" target="_blank">[ About ]</a> 下联系我 欢迎联系.ok,enjoy it ! ~~</p>
</blockquote>
]]></content>
      <tags>
        <tag>laradock</tag>
        <tag>centos7</tag>
        <tag>laravel5</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos下安装PHP7</title>
    <url>/2018/03/21/Centos%E4%B8%8B%E5%AE%89%E8%A3%85PHP7/</url>
    <content><![CDATA[<a id="more"></a>

<p>一、安装yum仓库</p>
<blockquote>
<p>yum install epel-release<br>rpm -Uvh <a href="https://mirror.webtatic.com/yum/el7/webtatic-release.rpm">https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</a></p>
</blockquote>
<p>二、安装php7</p>
<blockquote>
<p>yum install php70w<br>php -v</p>
</blockquote>
<p>三、安装php扩展</p>
<blockquote>
<p>yum search php70<br>yum install php70w-xml php70w-soap php70w-xmlrpc<br>yum install php70w-mbstring php70w-json php70w-gd php70w-mcrypt<br>yum install php70w-fpm php70w-mysql php70w-pdo php70w-opcache</p>
</blockquote>
<p>nginx 配置 php</p>
<p>1、启动fpm</p>
<blockquote>
<p>systemctl start php-fpm<br>systemctl enable php-fpm # 开机启动</p>
</blockquote>
<p>2、配置nginx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root html;        </span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;     # 也可以用 socket 进行连接</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、重启nginx</p>
<blockquote>
<p>systemctl restart nginx</p>
</blockquote>
<p>##php 错误日志##<br>nginx是一个web服务器，因此nginx的access日志只有对访问页面的记录，不会有php 的 error log信息。<br>nginx把对php的请求发给php-fpm fastcgi进程来处理，默认的php-fpm只会输出php-fpm的错误信息，在php-fpm的errors log里也看不到php的errorlog<br>原因是php-fpm的配置文件php-fpm.conf中默认是关闭worker进程的错误输出，直接把他们重定向到/dev/null,所以我们在nginx的error log 和php-fpm的errorlog都看不到php的错误日志。</p>
<p>1、修改php-fpm.conf中配置</p>
<blockquote>
<p>catch_workers_output = yes<br>error_log = log/error_log</p>
</blockquote>
<p>2、修改php.ini中配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log_errors &#x3D; On</span><br><span class="line">error_log &#x3D; &quot;&#x2F;var&#x2F;log&#x2F;php&#x2F;error_log&quot;  # 填写日志路径</span><br><span class="line">error_reporting &#x3D; E_ALL&amp;~E_NOTICE</span><br></pre></td></tr></table></figure>
<p>3、重启php-fpm<br>注意：<br>a、php-fpm.conf 中的php_admin_value[error_log] 参数 会覆盖php.ini中的 error_log 参数<br>所以确保你在phpinfo()中看到的最终error_log文件具有可写权限并且没有设置php_admin_value[error_log] 参数，否则错误日志会输出到php-fpm的错误日志里</p>
<p>b、找不到php.ini位置，使用php的phpinfo()结果查看<br>c、如何修改PHP错误日志不输出到页面或屏幕上</p>
<p>修改php.ini</p>
<blockquote>
<p>不显示错误信息(不输出到页面或屏幕上)<br>display_errors = off<br>记录错误信息(保存到日志文件中)<br>log_errors = on<br>捕获所有错误信息<br>error_reporting = E_ALL<br>设置日志文件名<br>error_log =   </p>
</blockquote>
<p>程序中修改以上配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ini_set(&quot;display_errors&quot;, 0)</span><br><span class="line">ini_set(&quot;error_reporting&quot;, E_ALL);  </span><br><span class="line">ini_set(&quot;error_log&quot;, &quot;&lt;日志文件名&gt;&quot;)</span><br><span class="line">ini_set(&quot;log_errors&quot;, 1);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Centos</tag>
        <tag>PHP7</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker下实践ELK(Elasticsearch、Logstash、Kibana)</title>
    <url>/2021/12/22/Docker%E4%B8%8B%E5%AE%9E%E8%B7%B5ELK-Elasticsearch%E3%80%81Logstash%E3%80%81Kibana/</url>
    <content><![CDATA[<p><img src="/assets/blogImg/elk.png" alt="elk"></p>
<a id="more"></a>

<p><strong>什么是 ELK</strong><br><a href="https://www.elastic.co/cn/what-is/elk-stack" target="_blank">[ 官方网址 ]</a> | <a href="https://github.com/deviantony/docker-elk" target="_blank">[ Github资源 ]</a><br><img src="/assets/blogImg/elk.svg" alt="elk"></p>
<ul>
<li>Elasticsearch</li>
</ul>
<blockquote>
<p>Elasticsearch 是一个分布式的 RESTful 风格的 <code>搜索和数据分析引擎</code>，能够解决不断涌现出的各种用例。作为 Elastic Stack 的核心，它集中<code>存储您的数据</code>，帮助您发现意料之中以及意料之外的情况。</p>
</blockquote>
<ul>
<li>Logstash</li>
</ul>
<blockquote>
<p>Logstash 是开源的服务器端数据处理管道，能够同时 从多个来源 <code>采集数据、转换数据</code>，然后将数据发送到您最喜欢的<code>存储库</code> （存储库是 <code>Elasticsearch</code>）中。</p>
</blockquote>
<ul>
<li>Kibana</li>
</ul>
<blockquote>
<p>Kibana 让您能够<code>可视化 Elasticsearch</code> 中的数据并操作 Elastic Stack。</p>
</blockquote>
<p><img src="/assets/blogImg/elk-lu.svg" alt="elk-lu"><br><strong>整体架构流程图：</strong><br><a href="https://excalidraw.com/" target="_blank">[ 画图工具 ]</a></p>
<ul>
<li>filebeat: 负责将日志数据传输到 redis</li>
<li>Redis：暂时进行缓存</li>
<li>logstash: 收集缓存中的日志数据</li>
<li>elasticsearch: 负责存储日志数据</li>
<li>kibana: 负责显示日志的数据</li>
</ul>
<p><img src="/assets/blogImg/elk1.png" alt="elk"></p>
]]></content>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>Etcd一文</title>
    <url>/2021/11/04/Etcd%E4%B8%80%E6%96%87/</url>
    <content><![CDATA[<p><img src="/assets/blogImg/etcd.png" alt="Etcd"></p>
<a id="more"></a>
<p><strong>一、概述</strong></p>
<blockquote>
<p>背景：近期k8s应用中etcd的功能存在一些困惑，对其进行来单独的学习，能更深入理解k8s中的的一些特性。</p>
</blockquote>
<ul>
<li>简单：安装配置简单，而且提供了HTTP API进行交互，使用也很简单</li>
<li>安全：支持SSL证书验证</li>
<li>快速：根据官方提供的benchmark数据，单实例支持每秒2k+读操作</li>
<li>可靠：采用raft算法，实现分布式系统数据的可用性和一致性</li>
</ul>
<p><strong>二、应用场景</strong></p>
<ul>
<li>服务注册与发现</li>
<li>消息发布与订阅</li>
<li>负载均衡</li>
<li>分部署通知与协调</li>
<li>分布式锁</li>
<li>分布式队列</li>
<li>集群与监控与Leader选举</li>
</ul>
<p><strong>三、安装部署</strong></p>
<p>推荐使用yum安装方式</p>
<blockquote>
<p>hostnamectl set-hostname etcd-1<br>wget <a href="http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm">http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a><br>rpm -ivh epel-release-latest-7.noarch.rpm</p>
<h1 id="yum-仓库中的etcd版本为3-3-11，如果需要最新版本的etcd可以进行二进制安装"><a href="#yum-仓库中的etcd版本为3-3-11，如果需要最新版本的etcd可以进行二进制安装" class="headerlink" title="yum 仓库中的etcd版本为3.3.11，如果需要最新版本的etcd可以进行二进制安装"></a>yum 仓库中的etcd版本为3.3.11，如果需要最新版本的etcd可以进行二进制安装</h1><p>yum -y install etcd<br>systemctl enable etcd</p>
</blockquote>
<p><strong>四、简单使用</strong></p>
<p>1、增加 set</p>
<blockquote>
<p>$ etcdctl set /testdir/testkey “Hello world”<br>Hello world</p>
</blockquote>
<p>2、删除 rm</p>
<blockquote>
<p>$ etcdctl rm /testdir/testkey<br>PrevNode.Value: Hello</p>
</blockquote>
<p>3、更新 update</p>
<blockquote>
<p>etcdctl update /testdir/testkey “Hello”<br>Hello</p>
</blockquote>
<p>4、查询 get</p>
<blockquote>
<p>etcdctl get /testdir/testkey<br>Hello world</p>
</blockquote>
<p><strong>五、总结</strong></p>
<ul>
<li><p>etcd 默认只保存 1000 个历史事件，所以不适合有大量更新操作的场景，这样会导致数据的丢失。 etcd 典型的应用场景是配置管理和服务发现，这些场景都是读多写少的。</p>
</li>
<li><p>相比于 zookeeper，etcd 使用起来要简单很多。不过要实现真正的服务发现功能，etcd 还需要和其他工具（比如 registrator、confd 等）一起使用来实现服务的自动注册和更新。</p>
</li>
<li><p>目前 etcd 还没有图形化的工具。 </p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Etcd</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 语言基础</title>
    <url>/2017/11/08/Go-%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<a id="more"></a>

<blockquote>
<p> 包、变量、函数</p>
</blockquote>
<ul>
<li><p>包<br>每个 Go 程序都是由包组成的。程序运行的入口是包 <code>main</code><br>这个程序使用并导入了包 “fmt” 和 <code>&quot;math/rand&quot;</code>。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;math&#x2F;rand&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li><p>变量<br>var 语句定义了一个变量的列表 如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var c, python, java bool</span><br><span class="line">var i, j int &#x3D; 1, 2</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	var i int</span><br><span class="line">	&#x2F;*在函数中，&#96;:&#x3D;&#96; 简洁赋值语句在明确类型的地方，可以用于替代 var 定义</span><br><span class="line">	函数外的每个语句都必须以关键字开始（&#96;var&#96;、&#96;func&#96;、等等），&#96;:&#x3D;&#96; 结构不能使用在函数外*&#x2F;</span><br><span class="line">	k :&#x3D; 3</span><br><span class="line">	var c, python, java &#x3D; true, false, &quot;no!&quot;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>函数<br>函数可以没有参数或接受多个参数<br>在这个例子中，<code>add</code> 接受两个 int 类型的参数。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func add(x int, y int) int &#123;</span><br><span class="line">	return x + y</span><br><span class="line">&#125;</span><br><span class="line">||</span><br><span class="line">func add(x , y int) int &#123;</span><br><span class="line">	return x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p> 流程控制语句</p>
</blockquote>
<ul>
<li><p>for<br>Go 只有一种循环结构——<code>for</code> 循环<br>基本的 for 循环除了没有了 <code>( )</code> 之外（甚至强制不能使用它们）。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	sum :&#x3D; 0</span><br><span class="line">	for i :&#x3D; 0; i &lt; 10; i++ &#123;</span><br><span class="line">		sum +&#x3D; i</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(sum)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>if<br>if 语句除了没有了 <code>( )</code> 之外（甚至强制不能使用它们）。如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func sqrt(x float64) string &#123;</span><br><span class="line">	if x &lt; 0 &#123;</span><br><span class="line">		return sqrt(-x) + &quot;i&quot;</span><br><span class="line">	&#125;</span><br><span class="line">	if v :&#x3D; math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line">		return v</span><br><span class="line">	&#125; else &#123;</span><br><span class="line">		fmt.Printf(&quot;%g &gt;&#x3D; %g\n&quot;, v, lim)</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>switch<br>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	fmt.Print(&quot;Go runs on &quot;)</span><br><span class="line">	switch os :&#x3D; runtime.GOOS; os &#123;</span><br><span class="line">	case &quot;darwin&quot;:</span><br><span class="line">		fmt.Println(&quot;OS X.&quot;)</span><br><span class="line">	case &quot;linux&quot;:</span><br><span class="line">		fmt.Println(&quot;Linux.&quot;)</span><br><span class="line">	default:</span><br><span class="line">		&#x2F;&#x2F; freebsd, openbsd,</span><br><span class="line">		&#x2F;&#x2F; plan9, windows...</span><br><span class="line">		fmt.Printf(&quot;%s.&quot;, os)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>defer<br>defer 语句会延迟函数的执行直到上层函数返回。<br>延迟调用的参数会立刻生成，但是在上层函数返回前函数都不会被调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	defer fmt.Println(&quot;world&quot;)&#x2F;&#x2F;延迟函数</span><br><span class="line">	fmt.Println(&quot;hello&quot;) &#x2F;&#x2F;上层函数</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;hello</span><br><span class="line">&#x2F;&#x2F;wolrd</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p> 复杂类型</p>
</blockquote>
<ul>
<li><p>指针<br>Go 具有指针。 指针保存了变量的内存地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	i, j :&#x3D; 42, 2701</span><br><span class="line"></span><br><span class="line">	p :&#x3D; &amp;i         &#x2F;* 生成一个指向 i 的指针 *&#x2F;</span><br><span class="line">	fmt.Println(*p) &#x2F;* 通过指针 p 读取 i    *&#x2F;</span><br><span class="line">	*p &#x3D; 21         &#x2F;* 通过指针 p 设置 i    *&#x2F;</span><br><span class="line">	fmt.Println(i)  &#x2F;* 输出 i &#x3D;21          *&#x2F; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结构体<br>一个结构体（<code>struct</code>）就是一个字段的集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type Vertex struct &#123;</span><br><span class="line">	X int</span><br><span class="line">	Y int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v :&#x3D; Vertex&#123;1, 2&#125;</span><br><span class="line">v.X &#x3D; 4</span><br><span class="line">fmt.Println(v.X)</span><br></pre></td></tr></table></figure>
</li>
<li><p>数组<br>类型 [n]T 是一个有 n 个类型为 T 的值的数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	var a [2]string</span><br><span class="line">	a[0] &#x3D; &quot;Hello&quot;</span><br><span class="line">	a[1] &#x3D; &quot;World&quot;</span><br><span class="line">	fmt.Println(a[0], a[1])</span><br><span class="line">	fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>slice<br>一个 slice 会指向一个序列的值，并且包含了长度信息<br>s[lo:hi]表示从 lo 到 hi-1 的 slice 元素，含两端。因此<br>s[lo:lo]是空的，而<br>s[lo:lo+1]有一个元素。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">	p :&#x3D; []int&#123;2, 3, 5, 7, 11, 13&#125;</span><br><span class="line">	fmt.Println(&quot;p &#x3D;&#x3D;&quot;, p)</span><br><span class="line"></span><br><span class="line">	for i :&#x3D; 0; i &lt; len(p); i++ &#123;</span><br><span class="line">		fmt.Printf(&quot;p[%d] &#x3D;&#x3D; %d\n&quot;, i, p[i])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>map<br>map 映射键到值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type Vertex struct &#123;</span><br><span class="line">	Lat, Long float64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var m map[string]Vertex</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	m &#x3D; make(map[string]Vertex)</span><br><span class="line">	m[&quot;Bell Labs&quot;] &#x3D; Vertex&#123;</span><br><span class="line">		40.68433, -74.39967,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(m[&quot;Bell Labs&quot;])</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>LNMP一键安装包常用命令及配置文件路径</title>
    <url>/2017/12/06/LNMP%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E5%8C%85%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<a id="more"></a>
<p><strong>LNMP常用命令</strong></p>
<blockquote>
<p>状态管理LNMP状态管理:</p>
</blockquote>
<p>lnmp [start|stop|reload|restart|kill|status]</p>
<blockquote>
<p>Nginx状态管理:</p>
</blockquote>
<p>/etc/init.d/nginx [start|stop|reload|restart]</p>
<blockquote>
<p>PHP-FPM状态管理:</p>
</blockquote>
<p>/etc/init.d/php-fpm [start|stop|quit|restart|reload|logrotate]</p>
<blockquote>
<p>MySQL状态管理:</p>
</blockquote>
<p>/etc/init.d/mysql [start|stop|restart|reload|force-reload|status]</p>
<blockquote>
<p>Apache状态管理:</p>
</blockquote>
<p>/etc/init.d/httpd [start|stop|restart|graceful|graceful-stop|configtest|status]</p>
<p><strong>配置文件路径</strong></p>
<blockquote>
<p>MySQL目录:</p>
</blockquote>
<p> /usr/local/mysql/</p>
<blockquote>
<p>MySQL配置文件:</p>
</blockquote>
<p>/etc/my.cnf</p>
<hr>
<blockquote>
<p>PHP目录:</p>
</blockquote>
<p> /usr/local/php/</p>
<blockquote>
<p>PHP配置文件:</p>
</blockquote>
<p>/usr/local/php/etc/php.ini</p>
<hr>
<blockquote>
<p>网站目录:</p>
</blockquote>
<p>/home/wwwroot/default/</p>
<blockquote>
<p>Nginx配置文件:</p>
</blockquote>
<p>/usr/local/nginx/conf/nginx.conf</p>
<blockquote>
<p>Nginx日志目录:</p>
</blockquote>
<p>/home/wwwlogs/</p>
<blockquote>
<p>Nginx虚拟主机配置文件:</p>
</blockquote>
<p>/usr/local/nginx/conf/vhost/域名.conf</p>
<blockquote>
<p>常用Linux命令:</p>
</blockquote>
<ul>
<li>top</li>
<li>df -m[k]</li>
<li>find / -type f -size +1G</li>
<li>[&gt; filename]</li>
</ul>
<p><strong>Notice</strong></p>
<blockquote>
<p>   如若需要，请戳 <a href="https://shunhua.github.io/about/" target="_blank">[ About ]</a> 下联系我 欢迎联系.ok,enjoy it ! </p>
</blockquote>
]]></content>
      <tags>
        <tag>lnmp</tag>
      </tags>
  </entry>
  <entry>
    <title>Laragon 在 Windows 中搭建 Laravel 开发环境</title>
    <url>/2017/09/15/Laragon-%E5%9C%A8-Windows-%E4%B8%AD%E6%90%AD%E5%BB%BA-Laravel-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<a id="more"></a>

<p><strong>一、简介</strong></p>
<blockquote>
<p>之前coder陆续写了三篇介绍 Laravel 开发环境的教程：Homestead、Valet 和 LaraDock，我都是在 Mac 系统中安装使用的，相当流畅，没有任何梗，但是对于那些使用 Windows 的同学来说，Valet 就不说了，Homestead 和 LaraDock 虽说支持 Windows 系统，但是对小白来说，还是有一定复杂度的，难免有些磕磕跘跘，遇到这样那样的奇怪问题，可能大部分人会退而继续使用 Xampp、Wamp、phpStudy 之类集成工具，今天学院君要给大家推荐一款可能更加容易使用的 Windows 集成开发环境，更重要的是，它对 Laravel 非常友好，它的名字叫做 Laragon。Laragon 具备以下优秀的特性：</p>
</blockquote>
<ul>
<li> 自动创建虚拟主机（Virtual Host，Valet 也有这样的功能）</li>
<li> 邮件接收和发送</li>
<li> 非常方便地切换 PHP、Apache、MySQL 的不同版本</li>
<li> 轻松创建框架应用，如 Laravel、Symfony、WordPress、Joomla 等</li>
<li> 基于自己的需求为不同的环境设置不同的配置</li>
</ul>
<blockquote>
<p> 所以，从今天起，可以抛弃那些传统的集成开发环境了，Windows 上也可以搭建优雅的开发环境！</p>
</blockquote>
<p><strong>二、安装</strong></p>
<blockquote>
<p> 我们可以在这里下载 Laragon：<a href="https://sourceforge.net/projects/laragon/" target="_blank">[ laragon ]</a>  Windows下的软件安装就不需多言了吧，注意在这一步勾选下 Auto virtual hosts（我的虚拟机语言选择中文乱码，所以使用了英文界面，你们可以自己根据喜好进行设置）：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/1.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 然后下一步点击安装即可。下面是 Laragon 启动后的界面：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/2.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 要启动 Apache、MySQL 服务，需要点击 Start All 按钮：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/3.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 这样点击 Web 即可打开浏览器访问默认站点 <a href="http://localhost：">http://localhost：</a></p>
</blockquote>
<p><img src="/assets/blogImg/laragon/4.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 要访问数据库，可以点击 Database 按钮：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/5.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 默认数据库是 Laragon，用户名是 root，密码是空字符串，点击打开按钮，就可以访问这个默认的数据库：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/6.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 点击 Laragon 界面的 Terminal 按钮可以进入到一个类 Unix 的终端工具 Cmder 进行命令行操作：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/7.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 最后，Laragon 界面还有一个 Root 按钮，点击之后即可进入 Laragon 文档根目录，我的 Laragon 安装在 C 盘下，所以对应的文档根目录是 C:\laragon\www</p>
</blockquote>
<blockquote>
<p> 此外，Laragon 界面右上角还有个齿轮按钮，点击可以对系统进行设置，比如我们可以设置语言为简体中文：：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/8.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 文件根目录：目录地址是可以修改的 若有自己的项目根目录，可以选择自己的根目录.然后再通过点击终端进去  进入根目录试用下命令模式 重新加载下<br>nginx、Apache 下次进入终端就是自己设置的默认根目录下了.</p>
</blockquote>
<p><strong>三、自动创建虚拟主机</strong></p>
<blockquote>
<p> 和 Valet 类似，当你在 Laragon 文档根目录下创建新的文件夹时，启动 Laragon 就会自动为你创建虚拟主机，默认主机域名是 <a href="http://folder_name.dev,在浏览器中访问这个域名就能看到/">http://folder_name.dev，在浏览器中访问这个域名就能看到</a> Web 页面了，是不是很方便？我们可以在命令行中使用 Laravel 安装器安装一个 blog 应用（不知道怎么操作？可以参考<a href="https://shunhua.github.io/2017/09/15/laravel5.5%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8-%E2%80%94%E2%80%94-%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E7%AF%87/" target="_blank">[ 安装配置文档 ]</a> 中的安装部分）：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/9.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 那么在重新加载 Apache 服务器之后，就可以在浏览中通过 <a href="http://blog.dev/">http://blog.dev</a> 访问刚刚创建的应用了：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/10.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 是不是很nice？如果你想将域名后缀 .dev 改成其它如 .com 可以通过点击 Laragon 界面上的齿轮按钮对默认配置进行修改：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/11.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 将 .env 改成 .com 重新加载 Apache 服务即可通过 <a href="http://blog.com/">http://blog.com</a> 访问站点。</p>
</blockquote>
<p><strong>四、切换 PHP、Apache 和 MySQL 版本</strong></p>
<blockquote>
<p> 你可以通过点击 Laragon 界面上的菜单来切换不同软件的版本：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/12.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 现在默认安装的 Laragon 每个软件都只有一个版本，以 PHP 为例如果想要支持多个版本的切换和测试，需要到 <a href="http://windows.php.net/download/">http://windows.php.net/download/</a> 去下载不同版本（需要下载 Non Thread Safe 版本），然后将下载后的文件解压到 C:\laragon\bin\php （注意这里的目录以你的Laragon安装目录为准，比如我的就是安装在 C:\laragon）目录下：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/13.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 这样就可以进行版本切换了：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/14.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 切换 MySQL 和 Apache 的版本也是类似，这里不再赘述，一般这种场景也不多。</p>
</blockquote>
<p><strong>五、启用 Nginx 替代 Apache</strong></p>
<blockquote>
<p> 如果你想要使用 Nginx 作为 Web 服务器，也可以轻松实现，在配置里面取消勾选 Apache，改为勾选 Nginx 然后修改绑定端口为 80 即可：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/18.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 启用 Memcached 和 Redis 也只需要勾选上相应的配置项即可，非常方便。配置完成后，Laragon 会自动关闭 Apache 并启动 Nginx 服务器：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/19.jpg" alt="ico原来的样子"></p>
<p>然后，在浏览器中访问 <a href="http://blog.dev,没有任何问题,平稳过渡,大功告成./">http://blog.dev，没有任何问题，平稳过渡，大功告成。</a></p>
<p><strong>六、快速创建 Laravel 应用</strong></p>
<blockquote>
<p> 上面我们通过 Laravel 安装器创建了一个新的 Laravel 应用，其实已经很方便了，但是还有更方便的，我们通过点击”菜单-&gt;快速创建-&gt;Laravel”可以不用敲任何命令就可以安装一个 Laravel 应用：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/15.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 在弹出的窗口中输入应用的名称：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/16.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 点击Ok后就会弹出命令行窗口为我们创建应用：</p>
</blockquote>
<p><img src="/assets/blogImg/laragon/17.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> Laragon 还有更多功能等着你去挖掘，比如也支持基于 Ngrok 进行站点分享，支持 Node、Putty、Yarn、文件传输等等，欢迎你在使用的过程中与我们分享。</p>
</blockquote>
<hr>
<ul>
<li><strong>Notice</strong></li>
</ul>
<blockquote>
<p>   如若需要，请戳 <a href="https://shunhua.github.io/about/" target="_blank">[ About ]</a> 下联系我 欢迎联系.ok,enjoy it ! </p>
</blockquote>
]]></content>
      <tags>
        <tag>Laragon</tag>
        <tag>Laravel</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel Redis 广播测试</title>
    <url>/2019/04/19/Laravel-Redis-%E5%B9%BF%E6%92%AD%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<a id="more"></a>

<p> 附上 <a href="https://github.com/shunhua/laravel-echo" target="_blank">[Github]</a> 地址 </p>
<p> 一、项目搭建<br> a.安装laravel</p>
<blockquote>
<p>composer create-project –prefer-dist laravel/laravel echo</p>
</blockquote>
<p> b.配置mysql 数据库</p>
<blockquote>
<p>php artisan migrate</p>
</blockquote>
<p>  c.快速认证</p>
<blockquote>
<p>php artisan make:auth</p>
</blockquote>
<p> 本文仅使用了 redis 的广播驱动 测试环境 win10<br> 二、安装redis 并启动</p>
<blockquote>
<p>redis-server.exe</p>
</blockquote>
<p><img src="/assets/blogImg/guangbo/redis.png" alt="ico原来的样子"><br>测试redis 连接成功<br><img src="/assets/blogImg/guangbo/redis1.png" alt="ico原来的样子"></p>
<p>a.配置文件 .env 中配置以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BROADCAST_DRIVER&#x3D;redis</span><br></pre></td></tr></table></figure>
<p>b.广播服务提供者  config/app.php 配置文件中 providers 数组中打开注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">App\Providers\BroadcastServiceProvider::class,</span><br></pre></td></tr></table></figure>
<p>c.CSRF 令牌[后续视图中添加]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;csrf-token&quot; content&#x3D;&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>d.安装 Predis 库</p>
<blockquote>
<p>composer require predis/predis</p>
</blockquote>
<p>三、安装 Laravel Echo</p>
<p>a.通过 npm 包管理器安装 Echo</p>
<blockquote>
<p>npm install<br>   npm install -g laravel-echo-server</p>
</blockquote>
<p>b.初始化 laravel-echo-server</p>
<blockquote>
<p>laravel-echo-server init</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 是否在开发模式下运行此服务器（y&#x2F;n） 输入y</span><br><span class="line">? Do you want to run this server in development mode? (y&#x2F;N) </span><br><span class="line">&#x2F;&#x2F; 设置服务器的端口 默认 6001 输入 6001就可以了 或者你想要的</span><br><span class="line">? Which port would you like to serve from? (6001)</span><br><span class="line">&#x2F;&#x2F; 想用的数据库  选择 redis</span><br><span class="line">? Which database would you like to use to store presence channel members? (Use arrow keys)</span><br><span class="line">❯ redis </span><br><span class="line">  sqlite </span><br><span class="line">&#x2F;&#x2F;   这里输入 你的laravel  项目的访问域名</span><br><span class="line">? Enter the host of your Laravel authentication server. (http:&#x2F;&#x2F;localhost) </span><br><span class="line">&#x2F;&#x2F; 选择 网络协议 http</span><br><span class="line">? Will you be serving on http or https? (Use arrow keys)</span><br><span class="line">❯ http </span><br><span class="line">  https </span><br><span class="line">&#x2F;&#x2F; 您想为HTTP API生成客户端ID&#x2F;密钥吗 N</span><br><span class="line">? Do you want to generate a client ID&#x2F;Key for HTTP API? (y&#x2F;N) </span><br><span class="line">&#x2F;&#x2F; 要设置对API的跨域访问吗？（y&#x2F;n）N</span><br><span class="line">Configuration file saved. Run laravel-echo-server start to run server.</span><br></pre></td></tr></table></figure>
<p>设置完成后 项目根目录 下 会生成 laravel-echo-server.json 文件 这里面就是刚才的配置<br><img src="/assets/blogImg/guangbo/echo.png" alt="ico原来的样子"><br>执行命令启动 服务 出现如下 则启动成功</p>
<blockquote>
<p>laravel-echo-server start</p>
</blockquote>
<p><img src="/assets/blogImg/guangbo/echo1.png" alt="ico原来的样子"></p>
<p>四、频道<br>频道Channel、PrivateChannel 或 PresenceChannel 的实例。Channel 实例表示任何用户都可以订阅的公开频道，而 PrivateChannels 和 PresenceChannels 则表示需要 频道授权 的私有频道：<br>a.创建事件</p>
<blockquote>
<p>php artisan make:event PublicMessageEvent </p>
</blockquote>
<p>文件生成目录 app/Events</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public $message;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Create a new event instance.</span><br><span class="line"> *</span><br><span class="line"> * @param User $user</span><br><span class="line"> * @param string $message</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function __construct(string $message)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;message &#x3D; $message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Get the channels the event should broadcast on.</span><br><span class="line"> *</span><br><span class="line"> * @return \Illuminate\Broadcasting\Channel|array</span><br><span class="line"> *&#x2F;</span><br><span class="line">public function broadcastOn()</span><br><span class="line">&#123;</span><br><span class="line">    return new Channel(&#39;push&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;Laravel 默认会使用事件的类名作为广播名称来广播事件，自定义：</span><br><span class="line">public function broadcastAs()</span><br><span class="line">&#123;</span><br><span class="line">    return &#39;push.message&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;想更细粒度地控制广播数据:</span><br><span class="line">public function broadcastWith()</span><br><span class="line">&#123;</span><br><span class="line">    return [&#39;message&#39; &#x3D;&gt; $this-&gt;message,&#39;status&#39; &#x3D;&gt; &#39;okok&#39;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; laravel-echo-server 1.5 版本的 需要添加 否则Laravel echo channel listen 不监听事件</span><br><span class="line">public function handle()</span><br><span class="line">&#123;</span><br><span class="line">    broadcast(new push());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>b.添加路由</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use App\Events\PublicMessageEvent;</span><br><span class="line"> Route::get(&#39;&#x2F;echo&#39;, function () &#123;</span><br><span class="line">    return view(&#39;echo&#39;);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line">Route::get(&#39;&#x2F;push&#x2F;&#123;message&#125;&#39;, function ($message) &#123;</span><br><span class="line">    broadcast(new PublicMessageEvent($message));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>五、前端视图<br>a.安装 laravel-echo</p>
<blockquote>
<p>npm install laravel-echo</p>
</blockquote>
<p>编辑 resource/js/bootstrap.js 添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Echo from &quot;laravel-echo&quot;</span><br><span class="line"></span><br><span class="line">window.Echo &#x3D; new Echo(&#123;</span><br><span class="line">    broadcaster: &#39;socket.io&#39;,</span><br><span class="line">    host: window.location.hostname + &#39;:6001&#39;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>编辑 resource/js/app.js 添加如下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Echo.channel(&#39;push&#39;)</span><br><span class="line">    .listen(&#39;.push.message&#39;, (e) &#x3D;&gt; &#123;</span><br><span class="line">        alert(e.message)</span><br><span class="line">        console.log(e);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>创建 echo.blade.php head 中加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;csrf-token&quot; content&#x3D;&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&#x2F;&#x2F;&#123;&#123; Request::getHost() &#125;&#125;:6001&#x2F;socket.io&#x2F;socket.io.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&#x2F;js&#x2F;app.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>编译 js 文件 </p>
<blockquote>
<p>npm run watch</p>
</blockquote>
<p>浏览器访问 项目域名 /echo<br>浏览器访问 项目域名 /push/这是一个测试广播[what can i say]<br>echo 页面 会自动弹出<br><img src="/assets/blogImg/guangbo/echo2.png" alt="ico原来的样子"><br><img src="/assets/blogImg/guangbo/echo4.png" alt="ico原来的样子"><br><img src="/assets/blogImg/guangbo/echo5.png" alt="ico原来的样子"><br>到这 广播 发布到公共频道就完成了</p>
<hr>
<p>私有频道 PrivateChannel</p>
<blockquote>
<p>php artisan make:event PrivateMessageEvent</p>
</blockquote>
<p>PrivateMessageEvent 中 写入 以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public $message;</span><br><span class="line">   public $user;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line">    * Create a new event instance.</span><br><span class="line">    *</span><br><span class="line">    * @param User $user</span><br><span class="line">    * @param string $message</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public function __construct(User $user, string $message)</span><br><span class="line">   &#123;</span><br><span class="line">       $this-&gt;user &#x3D; $user;</span><br><span class="line">       $this-&gt;message &#x3D; $message;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;**</span><br><span class="line">    * Get the channels the event should broadcast on.</span><br><span class="line">    *</span><br><span class="line">    * @return \Illuminate\Broadcasting\Channel|array</span><br><span class="line">    *&#x2F;</span><br><span class="line">   public function broadcastOn()</span><br><span class="line">   &#123;</span><br><span class="line">       return new PrivateChannel(&#39;privatePush.&#39; . $this-&gt;user-&gt;id);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F;想更细粒度地控制广播数据:</span><br><span class="line">   public function broadcastWith()</span><br><span class="line">   &#123;</span><br><span class="line">       return [&#39;message&#39; &#x3D;&gt; $this-&gt;message,&#39;status&#39; &#x3D;&gt; &#39;okok&#39;];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>添加发布广播到私有频道 触发路由 routes/web 测试时记得新增下用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&#39;&#x2F;privatePush&#x2F;&#123;message&#125;&#x2F;&#123;id&#125;&#39;, function ($message, $id) &#123;</span><br><span class="line">    $user &#x3D; \App\User::find($id);</span><br><span class="line">    if (empty($user)) return &#39;无此用户&#39;;</span><br><span class="line">    broadcast(new PrivateMessageEvent($user, $message));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>echo.blade.php 中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    @if(!empty(Auth::user()))</span><br><span class="line">        window.id &#x3D; &quot;&#123;&#123;Auth::user()-&gt;id&#125;&#125;&quot;</span><br><span class="line">    @endif</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>app.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Echo.private(&#39;privatePush.&#39; + window.id)</span><br><span class="line">    .listen(&#39;PrivateMessageEvent&#39;, (e) &#x3D;&gt; &#123;</span><br><span class="line">        alert(&#39;qweqwe&#39;)</span><br><span class="line">        console.log(e);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><strong>Notice</strong><br>安静,安静一下 Enjoy it ~</li>
</ul>
]]></content>
      <tags>
        <tag>laravel5.7</tag>
        <tag>Redis</tag>
        <tag>广播</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 事件系统</title>
    <url>/2019/04/22/Laravel-%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<a id="more"></a>

<p> 生成一个事件类</p>
<blockquote>
<p>php artisan make:event UserLogin</p>
</blockquote>
<p>app/Events 中就会自动生成一个 UserLogin.php 文件，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Events;</span><br><span class="line"></span><br><span class="line">use Illuminate\Broadcasting\Channel;</span><br><span class="line">use Illuminate\Queue\SerializesModels;</span><br><span class="line">use Illuminate\Broadcasting\PrivateChannel;</span><br><span class="line">use Illuminate\Broadcasting\PresenceChannel;</span><br><span class="line">use Illuminate\Broadcasting\InteractsWithSockets;</span><br><span class="line">use Illuminate\Contracts\Broadcasting\ShouldBroadcast;</span><br><span class="line"></span><br><span class="line">class UserLogin</span><br><span class="line">&#123;</span><br><span class="line">    use InteractsWithSockets, SerializesModels;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Create a new event instance.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Get the channels the event should broadcast on.</span><br><span class="line">     *</span><br><span class="line">     * @return Channel|array</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function broadcastOn()</span><br><span class="line">    &#123;</span><br><span class="line">        return new PrivateChannel(&#39;channel-name&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义监听器<br>一个事件可以被一个或多个监听器监听，也就是观察者模式，我们可以定义多个监听器，当这个事件发生，执行一系列逻辑。</p>
<p>在 app/Providers/EventServiceProvider 的 $listen 中可以定义事件和监听器，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected $listen &#x3D; [</span><br><span class="line">    &#39;App\Events\UserLogin&#39; &#x3D;&gt; [</span><br><span class="line">        &#39;App\Lisenter\DoSomething1&#39;,</span><br><span class="line">        &#39;App\Lisenter\Dosomething2&#39;,</span><br><span class="line">    ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<p>然后执行 artisan 命令，就可以自动在 app/Lisenter 目录生成监听器。</p>
<blockquote>
<p>php artisan event:generate</p>
</blockquote>
<p>可以看到 app/Lisenter 目录多了 DoSomething1.php 和 DoSomething2.php 两个文件，我们看看其中一个内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class DoSomething1</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Create the event listener.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * Handle the event.</span><br><span class="line">     *</span><br><span class="line">     * @param  UserLogin  $event</span><br><span class="line">     * @return void</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public function handle(UserLogin $event)</span><br><span class="line">    &#123;</span><br><span class="line">        info(&#39;do something1&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在两个监听器的 handle 方法中我们打印一个日志来测试一下，如代码 handle 方法所示。<br>分发和触发事件<br>我们在路由中来分发事件，也就是触发事件，看监听器是否正常工作 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use App\Events\UserLogin;</span><br><span class="line">Route::get(&#39;&#x2F;&#39;, function () &#123;</span><br><span class="line">	event(new UserLogin());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然后我们请求这个路由，观察日志，发现打印了日志：</p>
<p>[2019-04-22 10:04:29] local.INFO: do something1<br>[2019-04-22 10:04:29] local.INFO: do something2</p>
<p>队列异步处理<br>确认redis 连接正常  编辑env</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QUEUE_CONNECTION&#x3D;redis</span><br><span class="line"></span><br><span class="line">REDIS_HOST&#x3D;127.0.0.1</span><br><span class="line">REDIS_PASSWORD&#x3D;null</span><br><span class="line">REDIS_PORT&#x3D;6379</span><br></pre></td></tr></table></figure>

<p>比如把上面的 DoSomething1 改成需要放入队列的，只需要 implements ShoulQueue 接口。</p>
<pre><code>/**
 * 任务应该发送到的队列的连接的名称
 *
 * @var string|null
 */
public $connection = &#39;redis&#39;;

/**
 * 任务应该发送到的队列的名称
 *
 * @var string|null
 */
public $queue = &#39;listeners&#39;;</code></pre>
<p>我们再次执行路由。<br>日志里没有打印 do something1，只有 do something2，但是在 redis 队列里发现了一个名为 queues:default 的列表。 </p>
<blockquote>
<p>php artisan queue:work –queue=listeners</p>
</blockquote>
<p><img src="/assets/blogImg/event.png" alt="ico原来的样子"></p>
]]></content>
      <tags>
        <tag>laravel5.7</tag>
        <tag>Redis</tag>
        <tag>Event</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 和 Vue 的项目搭建</title>
    <url>/2018/11/02/Laravel-%E5%92%8C-Vue-%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<a id="more"></a>

<p><strong>一、Laravel创建项目</strong> </p>
<blockquote>
<p>composer create-project –prefer-dist laravel/laravel laravel-vue</p>
</blockquote>
<p><strong>二、扩展包</strong> </p>
<blockquote>
<p>npm install<br>npm install vue-router iview</p>
</blockquote>
<p><strong>三、前端结构搭建</strong><br>vue前端的文件结构在 /recources/js 目录[laravel5.7]，vue能够渲染主要是两个操作</p>
<ul>
<li>vue 挂载到页面的节点中</li>
<li>vue-router 处理路由，渲染对应的组件</li>
</ul>
<p>code流程  </p>
<ol>
<li><p>创建 web 路由<br>在 /routes/web.php 中新建一个访问我们挂载着vue页面的路由。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&#39;&#x2F;&#39;, function () &#123;</span><br><span class="line">    return view(&#39;welcome&#39;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑welcome.blade.php<br>在 resource/views 新建 welcome.blade.php,代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">  &lt;meta name&#x3D;&quot;csrf-token&quot; content&#x3D;&quot;&#123;&#123; csrf_token() &#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#123;&#123; mix(&#39;css&#x2F;app.css&#39;) &#125;&#125;&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body ontouchstart&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#123;&#123; mix(&#39;js&#x2F;app.js&#39;) &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 /recources/js/app.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require(&#39;.&#x2F;bootstrap&#39;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入扩展包</span><br><span class="line">window.Vue &#x3D; require(&#39;vue&#39;);</span><br><span class="line"></span><br><span class="line">import App from &#39;.&#x2F;components&#x2F;app.vue&#39;</span><br><span class="line">import VueRouter from &#39;vue-router&#39;;</span><br><span class="line">import iView from &#39;iview&#39;;</span><br><span class="line">import &#39;iview&#x2F;dist&#x2F;styles&#x2F;iview.css&#39;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 导入vue</span><br><span class="line">Vue.use(iView);</span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 路由配置</span><br><span class="line">const RouterConfig &#x3D; &#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#x2F;&#x2F; ExampleComponent laravel默认的示例组件</span><br><span class="line">        &#123; path: &#39;&#x2F;&#39;, component: require(&#39;.&#x2F;components&#x2F;ExampleComponent.vue&#39;) &#125;,</span><br><span class="line">        &#123; path: &#39;&#x2F;bsh&#39;, component: require(&#39;.&#x2F;components&#x2F;bsh.vue&#39;) &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line">const router &#x3D; new VueRouter(RouterConfig);</span><br><span class="line"></span><br><span class="line">const app &#x3D; new Vue(&#123;</span><br><span class="line">    el: &#39;#app&#39;,</span><br><span class="line">    router: router,</span><br><span class="line">    render: h &#x3D;&gt; h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>建立 Layout<br>在 /recources/js/components/ 新建 app.vue, 将 iview 的 layout 代码搬过来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .layout-con&#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    width: 100%;</span><br><span class="line">  &#125;</span><br><span class="line">  .menu-item span&#123;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    width: 69px;</span><br><span class="line">    text-overflow: ellipsis;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">    vertical-align: bottom;</span><br><span class="line">    transition: width .2s ease .2s;</span><br><span class="line">  &#125;</span><br><span class="line">  .menu-item i&#123;</span><br><span class="line">    transform: translateX(0px);</span><br><span class="line">    transition: font-size .2s ease, transform .2s ease;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">  &#125;</span><br><span class="line">  .collapsed-menu span&#123;</span><br><span class="line">    width: 0px;</span><br><span class="line">    transition: width .2s ease;</span><br><span class="line">  &#125;</span><br><span class="line">  .collapsed-menu i&#123;</span><br><span class="line">    transform: translateX(5px);</span><br><span class="line">    transition: font-size .2s ease .2s, transform .2s ease .2s;</span><br><span class="line">    vertical-align: middle;</span><br><span class="line">    font-size: 22px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class&#x3D;&quot;layout&quot;&gt;</span><br><span class="line">    &lt;Layout :style&#x3D;&quot;&#123;minHeight: &#39;100vh&#39;&#125;&quot;&gt;</span><br><span class="line">      &lt;Sider collapsible :collapsed-width&#x3D;&quot;78&quot; v-model&#x3D;&quot;isCollapsed&quot;&gt;</span><br><span class="line">        &lt;Menu active-name&#x3D;&quot;1-2&quot; theme&#x3D;&quot;dark&quot; width&#x3D;&quot;auto&quot; :class&#x3D;&quot;menuitemClasses&quot;&gt;</span><br><span class="line">          &lt;MenuItem name&#x3D;&quot;1-1&quot;&gt;</span><br><span class="line">            &lt;Icon type&#x3D;&quot;ios-navigate&quot;&gt;&lt;&#x2F;Icon&gt;</span><br><span class="line">            &lt;span&gt;Option 1&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;MenuItem&gt;</span><br><span class="line">          &lt;MenuItem name&#x3D;&quot;1-2&quot;&gt;</span><br><span class="line">            &lt;Icon type&#x3D;&quot;search&quot;&gt;&lt;&#x2F;Icon&gt;</span><br><span class="line">            &lt;span&gt;Option 2&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;MenuItem&gt;</span><br><span class="line">          &lt;MenuItem name&#x3D;&quot;1-3&quot;&gt;</span><br><span class="line">            &lt;Icon type&#x3D;&quot;settings&quot;&gt;&lt;&#x2F;Icon&gt;</span><br><span class="line">            &lt;span&gt;Option 3&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;MenuItem&gt;</span><br><span class="line">        &lt;&#x2F;Menu&gt;</span><br><span class="line">      &lt;&#x2F;Sider&gt;</span><br><span class="line">      &lt;Layout&gt;</span><br><span class="line">        &lt;Header :style&#x3D;&quot;&#123;background: &#39;#fff&#39;, boxShadow: &#39;0 2px 3px 2px rgba(0,0,0,.1)&#39;&#125;&quot;&gt;&lt;&#x2F;Header&gt;</span><br><span class="line">        &lt;Content :style&#x3D;&quot;&#123;padding: &#39;0 16px 16px&#39;&#125;&quot;&gt;</span><br><span class="line">          &lt;Breadcrumb :style&#x3D;&quot;&#123;margin: &#39;16px 0&#39;&#125;&quot;&gt;</span><br><span class="line">            &lt;BreadcrumbItem&gt;Home&lt;&#x2F;BreadcrumbItem&gt;</span><br><span class="line">            &lt;BreadcrumbItem&gt;Components&lt;&#x2F;BreadcrumbItem&gt;</span><br><span class="line">            &lt;BreadcrumbItem&gt;Layout&lt;&#x2F;BreadcrumbItem&gt;</span><br><span class="line">          &lt;&#x2F;Breadcrumb&gt;</span><br><span class="line">          &lt;Card&gt;</span><br><span class="line">            &lt;div style&#x3D;&quot;height: 600px&quot;&gt;&lt;router-view&gt;&lt;&#x2F;router-view&gt;&lt;&#x2F;div&gt;</span><br><span class="line">          &lt;&#x2F;Card&gt;</span><br><span class="line">        &lt;&#x2F;Content&gt;</span><br><span class="line">      &lt;&#x2F;Layout&gt;</span><br><span class="line">    &lt;&#x2F;Layout&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        isCollapsed: false</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">      menuitemClasses: function () &#123;</span><br><span class="line">        return [</span><br><span class="line">          &#39;menu-item&#39;,</span><br><span class="line">          this.isCollapsed ? &#39;collapsed-menu&#39; : &#39;&#39;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>添加组件<br>路由访问的组件会渲染到 app.vue中的[router-view]<br>然后修改组件 /recources/js/components/bsh.vue 的内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;Tabs&gt;</span><br><span class="line">        &lt;TabPane label&#x3D;&quot;macOS&quot; icon&#x3D;&quot;social-apple&quot;&gt;标签一的内容&lt;&#x2F;TabPane&gt;</span><br><span class="line">        &lt;TabPane label&#x3D;&quot;Windows&quot; icon&#x3D;&quot;social-windows&quot;&gt;标签二的内容&lt;&#x2F;TabPane&gt;</span><br><span class="line">        &lt;TabPane label&#x3D;&quot;Linux&quot; icon&#x3D;&quot;social-tux&quot;&gt;标签三的内容&lt;&#x2F;TabPane&gt;</span><br><span class="line">    &lt;&#x2F;Tabs&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>编译运行<br>常用的编译命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 本地环境编译</span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"># 本地环境编译 + 监控文件修改</span><br><span class="line">npm run watch</span><br><span class="line"></span><br><span class="line"># 生产环境编译</span><br><span class="line">npm run prod</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <tags>
        <tag>Laravel</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel yansongda/laravel-pay</title>
    <url>/2018/09/29/Laravel-yansongda-laravel-pay/</url>
    <content><![CDATA[<a id="more"></a>

<blockquote>
<p>运行环境:</p>
</blockquote>
<ul>
<li>php &gt;= 7.0</li>
<li>composer</li>
<li>laravel || lumen &gt;= 5.1</li>
</ul>
<p><strong>一、安装</strong></p>
<blockquote>
<p>composer require yansongda/laravel-pay</p>
</blockquote>
<p>添加service provider（如果laravel&lt;5.5 或者 lumen）[5.5以上忽略]</p>
<p>laravel &lt; 5.5</p>
<blockquote>
<p>Yansongda\LaravelPay\PayServiceProvider::class,</p>
</blockquote>
<p>lumen</p>
<blockquote>
<p>$app-&gt;register(Yansongda\LaravelPay\PayServiceProvider::class);</p>
</blockquote>
<p>添加 alias（如果laravel&lt;5.5 或者 lumen）[5.5以上忽略]</p>
<blockquote>
<p>‘Pay’ =&gt; Yansongda\LaravelPay\Facades\Pay::class,</p>
</blockquote>
<p>配置文件</p>
<blockquote>
<p>php artisan vendor:publish –provider=”Yansongda\LaravelPay\PayServiceProvider” –tag=laravel-pay</p>
</blockquote>
<p><strong>二、使用[支付宝]</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use Yansongda\Pay\Pay;</span><br><span class="line"></span><br><span class="line">$config &#x3D; [</span><br><span class="line">    &#39;app_id&#39; &#x3D;&gt; &#39;2016082000295641&#39;,</span><br><span class="line">    &#39;notify_url&#39; &#x3D;&gt; &#39;http:&#x2F;&#x2F;yansongda.cn&#x2F;notify.php&#39;,</span><br><span class="line">    &#39;return_url&#39; &#x3D;&gt; &#39;http:&#x2F;&#x2F;yansongda.cn&#x2F;return.php&#39;,</span><br><span class="line">    &#39;ali_public_key&#39; &#x3D;&gt; &#39;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuWJKrQ6SWvS6niI+4vEVZiYfjkCfLQfoFI2nCp9ZLDS42QtiL4Ccyx8scgc3nhVwmVRte8f57TFvGhvJD0upT4O5O&#x2F;lRxmTjechXAorirVdAODpOu0mFfQV9y&#x2F;T9o9hHnU+VmO5spoVb3umqpq6D&#x2F;Pt8p25Yk852&#x2F;w01VTIczrXC4QlrbOEe3sr1E9auoC7rgYjjCO6lZUIDjX&#x2F;oBmNXZxhRDrYx4Yf5X7y8FRBFvygIE2FgxV4Yw+SL3QAa2m5MLcbusJpxOml9YVQfP8iSurx41PvvXUMo49JG3BDVernaCYXQCoUJv9fJwbnfZd7J5YByC+5KM4sblJTq7bXZWQIDAQAB&#39;,</span><br><span class="line">    &#39;private_key&#39; &#x3D;&gt; &#39;MIIEpAIBAAKCAQEAs6+F2leOgOrvj9jTeDhb5q46GewOjqLBlGSs&#x2F;bVL4Z3fMr3p+Q1Tux&#x2F;6uogeVi&#x2F;eHd84xvQdfpZ87A1SfoWnEGH5z15yorccxSOwWUI+q8gz51IWqjgZxhWKe31BxNZ+prnQpyeMBtE25fXp5nQZ&#x2F;pftgePyUUvUZRcAUisswntobDQKbwx28VCXw5XB2A+lvYEvxmMv&#x2F;QexYjwKK4M54j435TuC3UctZbnuynSPpOmCu45ZhEYXd4YMsGMdZE5&#x2F;077ZU1aU7wx&#x2F;gk07PiHImEOCDkzqsFo0Buc&#x2F;knGcdOiUDvm2hn2y1XvwjyFOThsqCsQYi4JmwZdRa8kvOf57nwIDAQABAoIBAQCw5QCqln4VTrTvcW+msB1ReX57nJgsNfDLbV2dG8mLYQemBa9833DqDK6iynTLNq69y88ylose33o2TVtEccGp8Dqluv6yUAED14G6LexS43KtrXPgugAtsXE253ZDGUNwUggnN1i0MW2RcMqHdQ9ORDWvJUCeZj&#x2F;AEafgPN8AyiLrZeL07jJz&#x2F;uaRfAuNqkImCVIarKUX3HBCjl9TpuoMjcMhz&#x2F;MsOmQ0agtCatO1eoH1sqv5Odvxb1i59c8Hvq&#x2F;mGEXyRuoiDo05SE6IyXYXr84&#x2F;Nf2xvVNHNQA6kTckj8shSi+HGM4mO1Y4Pbb7XcnxNkT0Inn6oJMSiy56P+CpAoGBAO1O+5FE1ZuVGuLb48cY+0lHCD+nhSBd66B5FrxgPYCkFOQWR7pWyfNDBlmO3SSooQ8TQXA25blrkDxzOAEGX57EPiipXr&#x2F;hy5e+WNoukpy09rsO1TMsvC+v0FXLvZ+TIAkqfnYBgaT56ku7yZ8aFGMwdCPL7WJYAwUIcZX8wZ3dAoGBAMHWplAqhe4bfkGOEEpfs6VvEQxCqYMYVyR65K0rI1LiDZn6Ij8fdVtwMjGKFSZZTspmsqnbbuCE&#x2F;VTyDzF4NpAxdm3cBtZACv1Lpu2Om+aTzhK2PI6WTDVTKAJBYegXaahBCqVbSxieR62IWtmOMjggTtAKWZ1P5LQcRwdkaB2rAoGAWnAPT318Kp7YcDx8whOzMGnxqtCc24jvk2iSUZgb2Dqv+3zCOTF6JUsV0Guxu5bISoZ8GdfSFKf5gBAo97sGFeuUBMsHYPkcLehM1FmLZk1Q+ljcx3P1A&#x2F;ds3kWXLolTXCrlpvNMBSN5NwOKAyhdPK&#x2F;qkvnUrfX8sJ5XK2H4J8ECgYAGIZ0HIiE0Y+g9eJnpUFelXvsCEUW9YNK4065SD&#x2F;BBGedmPHRC3OLgbo8X5A9BNEf6vP7fwpIiRfKhcjqqzOuk6fueA&#x2F;yvYD04v+Da2MzzoS8+hkcqF3T3pta4I4tORRdRfCUzD80zTSZlRc&#x2F;h286Y2eTETd+By1onnFFe2X01mwKBgQDaxo4PBcLL2OyVT5DoXiIdTCJ8KNZL9+kV1aiBuOWxnRgkDjPngslzNa1bK+klGgJNYDbQqohKNn1HeFX3mYNfCUpuSnD2Yag53Dd&#x2F;1DLO+NxzwvTu4D6DCUnMMMBVaF42ig31Bs0jI3JQZVqeeFzSET8fkoFopJf3G6UXlrIEAQ&#x3D;&#x3D;&#39;,</span><br><span class="line">    &#39;http&#39; &#x3D;&gt; [ &#x2F;&#x2F; optional</span><br><span class="line">        &#39;timeout&#39; &#x3D;&gt; 5.0,</span><br><span class="line">        &#39;connect_timeout&#39; &#x3D;&gt; 5.0,</span><br><span class="line">        &#x2F;&#x2F; 更多配置项请参考 [Guzzle](https:&#x2F;&#x2F;guzzle-cn.readthedocs.io&#x2F;zh_CN&#x2F;latest&#x2F;request-options.html)</span><br><span class="line">    ]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 支付</span><br><span class="line">$order &#x3D; [</span><br><span class="line">    &#39;out_trade_no&#39; &#x3D;&gt; time(),</span><br><span class="line">    &#39;total_amount&#39; &#x3D;&gt; &#39;1&#39;,</span><br><span class="line">    &#39;subject&#39; &#x3D;&gt; &#39;test&#39;,</span><br><span class="line">];</span><br><span class="line">$alipay &#x3D; Pay::alipay($config)-&gt;web($order);</span><br><span class="line"></span><br><span class="line">return $alipay-&gt;send();&#x2F;&#x2F; laravel 框架中请直接 &#96;return $alipay&#96;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 退款</span><br><span class="line">$order &#x3D; [</span><br><span class="line">    &#39;out_trade_no&#39; &#x3D;&gt; &#39;1514027114&#39;,</span><br><span class="line">    &#39;refund_amount&#39; &#x3D;&gt; &#39;0.01&#39;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$result &#x3D; Pay::alipay($config)-&gt;refund($order); &#x2F;&#x2F; 返回 &#96;Yansongda\Supports\Collection&#96; 实例，可以通过 &#96;$result-&gt;xxx&#96; 访问服务器返回的数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 查询</span><br><span class="line">$result &#x3D; Pay::alipay($config)-&gt;find(&#39;out_trade_no_123456&#39;); &#x2F;&#x2F; 返回 &#96;Yansongda\Supports\Collection&#96; 实例，可以通过 &#96;$result-&gt;xxx&#96; 访问服务器返回的数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 取消</span><br><span class="line">$result &#x3D; Pay::alipay($config)-&gt;cancel(&#39;out_trade_no_123456&#39;); &#x2F;&#x2F; 返回 &#96;Yansongda\Supports\Collection&#96; 实例，可以通过 &#96;$result-&gt;xxx&#96; 访问服务器返回的数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 关闭</span><br><span class="line">$result &#x3D; Pay::alipay($config)-&gt;close(&#39;out_trade_no_123456&#39;); &#x2F;&#x2F; 返回 &#96;Yansongda\Supports\Collection&#96; 实例，可以通过 &#96;$result-&gt;xxx&#96; 访问服务器返回的数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 验证服务器数据</span><br><span class="line">$alipay &#x3D; Pay::alipay($config)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 是的，验签就这么简单！</span><br><span class="line">$data &#x3D; $alipay-&gt;verify(); &#x2F;&#x2F; 返回 &#96;Yansongda\Supports\Collection&#96; 实例，可以通过 &#96;$data-&gt;xxx&#96; 访问服务器返回的数据。</span><br><span class="line"></span><br><span class="line">$alipay-&gt;success()-&gt;send(); &#x2F;&#x2F; 向支付宝服务器确认接收到的数据。laravel 框架中请直接 &#96;return $alipay-&gt;success()&#96;</span><br></pre></td></tr></table></figure>


<hr>
<ul>
<li><strong>Notice</strong></li>
</ul>
<blockquote>
<p>若前端框架使用vue、react等 此时后端返回的是form表单需要简单处理下，如下:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const div &#x3D; document.createElement(&#39;div&#39;) &#x2F;&#x2F; 创建div</span><br><span class="line">div.innerHTML &#x3D; res.data &#x2F;&#x2F; 将返回的form 放入div</span><br><span class="line">document.body.appendChild(div)</span><br><span class="line">document.forms[&#39;alipaysubmit&#39;].submit()</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>laravel5.6</tag>
        <tag>laravel-pay</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下安装node.js</title>
    <url>/2018/03/21/Linux%E4%B8%8B%E5%AE%89%E8%A3%85node-js/</url>
    <content><![CDATA[<a id="more"></a>
<p>如新建目录nodejs</p>
<blockquote>
<p> cd /home/nodejs</p>
</blockquote>
<p><a href="https://nodejs.org/en/download/" target="_blank">[ 下载nodejs ]</a></p>
<blockquote>
<p> wget <a href="https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz">https://nodejs.org/dist/v6.9.5/node-v6.9.5-linux-x64.tar.xz</a></p>
</blockquote>
<p>解压</p>
<blockquote>
<p> xz -d node-v6.9.5-linux-x64.tar.xz<br>tar xvf node-v6.9.5-linux-x64.tar</p>
</blockquote>
<p>建立连接</p>
<blockquote>
<p> ln -s /home/nodejs/node-v6.9.5-linux-x64/bin/node /usr/local/bin/node<br>ln -s /home/nodejs/node-v6.9.5-linux-x64/bin/npm /usr/local/bin/npm</p>
</blockquote>
<hr>
<p>另一版本</p>
<blockquote>
<p> wget <a href="https://npm.taobao.org/mirrors/node/v10.15.0/node-v10.15.0-linux-x64.tar.xz">https://npm.taobao.org/mirrors/node/v10.15.0/node-v10.15.0-linux-x64.tar.xz</a></p>
</blockquote>
<p>解压</p>
<blockquote>
<p> xz -d node-v10.15.0-linux-x64.tar.xz<br>tar xvf node-v10.15.0-linux-x64.tar</p>
</blockquote>
<p>建立连接</p>
<blockquote>
<p> ln -s /home/nodejs/node-v10.15.0-linux-x64/bin/node /usr/local/bin/node<br>ln -s /home/nodejs/node-v10.15.0-linux-x64/bin/npm /usr/local/bin/npm</p>
</blockquote>
<p>加速</p>
<blockquote>
<p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> –global<br>npm config set disturl <a href="https://npm.taobao.org/dist">https://npm.taobao.org/dist</a> –global</p>
</blockquote>
<p>版本</p>
<blockquote>
<p> node -v<br> npm -v</p>
</blockquote>
<hr>
<ul>
<li><strong>Notice</strong></li>
</ul>
<blockquote>
<p>   如若需要，请戳 <a href="https://shunhua.github.io/about/" target="_blank">[ About ]</a> 下联系我 欢迎联系.ok,enjoy it ! </p>
</blockquote>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装配置守护进程</title>
    <url>/2018/03/09/Linux%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<a id="more"></a>

<blockquote>
<p> centos 下安装Supervisor</p>
</blockquote>
<p>yum install supervisor</p>
<blockquote>
<p> 配置Supervisor</p>
</blockquote>
<p>cd /etc/supervisord.d/<br>vim laravel-worker.ini<br>systemctl start supervisord</p>
]]></content>
      <tags>
        <tag>linux</tag>
        <tag>Supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux定时任务采集聚合数据api文章</title>
    <url>/2019/04/18/Linux%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E9%87%87%E9%9B%86%E8%81%9A%E5%90%88%E6%95%B0%E6%8D%AEapi%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p><strong>Linux定时任务采集文章</strong> </p>
<a id="more"></a>

<p>一、<a href="https://learnku.com/docs/laravel/5.7/scheduling/1396" target="_blank">[ Artisan 命令调度-任务调度 ]</a></p>
<p>二、crond服务</p>
<p>crontab:</p>
<blockquote>
<p>crontab -l //列出crontab<br>crontab -e //编辑crontab<br>crontab -r //删除crontab</p>
</blockquote>
<p>服务操作：</p>
<blockquote>
<p>service crond start //启动服务<br>  service crond stop //关闭服务<br>  service crond restart //重启服务<br>  service crond reload //重新载入配置<br>  service crond status //查看状态</p>
</blockquote>
<p>三、创建crontab</p>
<blockquote>
<p>crontab -e </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* * * * * php &#x2F;home&#x2F;wwwroot&#x2F;wwyl.xxxx.xyz&#x2F;wwyl&#x2F;artisan schedule:run &gt;&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>四、查看crontab状态并启动</p>
<blockquote>
<p>service crond status<br>service crond start </p>
</blockquote>
<p>五、查看结果</p>
<p><img src="/assets/blogImg/crontab.png" alt="ico原来的样子"></p>
]]></content>
      <tags>
        <tag>Laravel</tag>
        <tag>Linux</tag>
        <tag>crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>Live 阿里云直播</title>
    <url>/2019/07/04/Live-%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%B4%E6%92%AD/</url>
    <content><![CDATA[<a id="more"></a>
<p> <a href="https://help.aliyun.com/document_detail/86866.html?spm=a2c4g.11186623.6.573.72df68123ova0d" target="_blank">[阿里云文档]</a> 具体流程依据文档<br> 需要：备案域名 / 直播云服务器</p>
<blockquote>
<p>开通阿里云直播控制台</p>
</blockquote>
<p><img src="/assets/aliyun/1.png" alt="ico原来的样子"><br><img src="/assets/aliyun/2.png" alt="ico原来的样子"></p>
<blockquote>
<p>直播控制台-概览配置 推流/播流 域名</p>
</blockquote>
<p>生成之后解析对应域名的 CNAME 到推流/播流域名上<br><img src="/assets/aliyun/3.png" alt="ico原来的样子"></p>
<blockquote>
<p>PC端 OBS/VLC 测试</p>
</blockquote>
<p>地址生成器–&gt;生成的 推流/播流 地址相应在 OBS/VLC 上使用即可看到同步直播</p>
<p><img src="/assets/aliyun/4.png" alt="ico原来的样子"><br><img src="/assets/aliyun/5.png" alt="ico原来的样子"><br><img src="/assets/aliyun/6.png" alt="ico原来的样子"><br><img src="/assets/aliyun/7.png" alt="ico原来的样子"></p>
<blockquote>
<p>观看直播 [后续…]</p>
</blockquote>
<p> 前面的直播推流配置完成之后，我们需要让用户或者观众看到直播<br> 正常用户观看直播的流程是：登录直播网站 -&gt; 点开直播房间 -&gt; 服务器获取播放地址 -&gt; 用户观看直播<br> 1.创建一个测试直播的控制器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\Http\Controllers;</span><br><span class="line"></span><br><span class="line">use xxx;&#x2F;&#x2F;sdk包</span><br><span class="line"></span><br><span class="line">class LiveController extends Controller</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; 通过sdk获取直播地址</span><br><span class="line">        $liveurl &#x3D; \xxx\xxx\xxx(&#39;xxx&#39;, &#39;app&#39;, &#39;stream&#39;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.页面展示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入 CDN --&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;flv.js&#x2F;1.3.2&#x2F;flv.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- dom --&gt;</span><br><span class="line">&lt;video id&#x3D;&quot;videoElement&quot;&gt;&lt;&#x2F;video&gt;</span><br><span class="line">&lt;!-- js --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    if (flvjs.isSupported()) &#123;</span><br><span class="line">        var videoElement &#x3D; document.getElementById(&#39;videoElement&#39;);</span><br><span class="line">        var flvPlayer &#x3D; flvjs.createPlayer(&#123;</span><br><span class="line">            type: &#39;flv&#39;,</span><br><span class="line">            url: &#39;&#123;&#123; $liveurl &#125;&#125;&#39;</span><br><span class="line">        &#125;);</span><br><span class="line">        flvPlayer.attachMediaElement(videoElement);</span><br><span class="line">        flvPlayer.load();</span><br><span class="line">        flvPlayer.play();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><strong>Notice</strong><br>后续通过sdk整合到项目开发中…</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>MySQL出现1030-Got error 28 from storage engine错误</title>
    <url>/2018/11/22/MySQL%E5%87%BA%E7%8E%B01030-Got-error-28-from-storage-engine%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<a id="more"></a>

<p>一般这种情况都是日志文件太大导致的</p>
<ul>
<li>mysql二进制文件 参考文档：<a href="https://baishunhua.com/2017/12/06/MySQL%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF/" target="_blank">[ MySQL启动错误 ]</a></li>
<li>其他日志文件</li>
</ul>
<blockquote>
<p>df -h</p>
</blockquote>
<p>查看磁盘使用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -h --max-depth&#x3D;1 | grep G | sort -n</span><br></pre></td></tr></table></figure>
<p>以G单位排序查看占用磁盘的文件，然后删除没用的日志文件 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -s * | sort -nr</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>lnmp</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 基本语法</title>
    <url>/2017/08/11/Markdown-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p><strong>^本文主要介绍markdown</strong></p>
<blockquote>
<p>Markdown 基本语法—— </p>
</blockquote>
<a id="more"></a>

<p>Ⅰ. 标题设置（让字体变大，和word的标题意思一样）<br>在Markdown当中设置标题，有两种方式：<br>a：通过在文字下方添加“等号”和“减”，他们分别表示一级标题和二级标题。<br>b：在文字开头加上 “星”，通过“星”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）<br>example:<br>    a、<br>This is an H1<br>====<br>This is an H2</p>
<hr>
<p>b、</p>
<h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="This-is-an-H3"><a href="#This-is-an-H3" class="headerlink" title="This is an H3"></a>This is an H3</h3><h4 id="This-is-an-H4"><a href="#This-is-an-H4" class="headerlink" title="This is an H4"></a>This is an H4</h4><h5 id="This-is-an-H5"><a href="#This-is-an-H5" class="headerlink" title="This is an H5"></a>This is an H5</h5><h6 id="This-is-an-H6"><a href="#This-is-an-H6" class="headerlink" title="This is an H6"></a>This is an H6</h6><hr>
<p>Ⅱ. 块注释（blockquote）<br>通过在文字开头添加“&gt;”表示块注释。（当&gt;和文字之间添加五个blank时，块注释的文字会有变化。）<br>example:</p>
<blockquote>
<p>简单引用1<br>简单引用2</p>
<p>多行引用</p>
<blockquote>
<p>嵌套引用</p>
</blockquote>
</blockquote>
<blockquote>
<h2 id="引用中使用Markdown语法。"><a href="#引用中使用Markdown语法。" class="headerlink" title="引用中使用Markdown语法。"></a>引用中使用Markdown语法。</h2><ul>
<li>  这是第一行列表项。</li>
<li>  这是第二行列表项。</li>
</ul>
<p>给出一些例子代码：</p>
<pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre>
</blockquote>
<p>Ⅲ. 斜体<br>将需要设置为斜体的文字两端使用1个“星号”或者“下划线”夹起来<br>example:</p>
<blockquote>
<p>a、星号、   <em>斜体</em></p>
</blockquote>
<blockquote>
<p>b、下划线、   <em>斜体</em></p>
</blockquote>
<p>Ⅳ. 粗体<br>将需要设置为斜体的文字两端使用2个“星号”或者“下划线”夹起来<br>example:</p>
<blockquote>
<p>a、星号、   <strong>斜体</strong><br>b、下划线、   <strong>斜体</strong></p>
</blockquote>
<p>Ⅴ. 无序列表<br>在文字开头添加(星, 加, and 减)实现无序列表。但是要注意在(星, 加, and 减)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式）</p>
<blockquote>
<blockquote>
<p>example: </p>
</blockquote>
<ul>
<li>kobe</li>
</ul>
<ul>
<li>bryant</li>
</ul>
<ul>
<li>lakers</li>
</ul>
</blockquote>
<p>Ⅵ. 有序列表<br>使用数字后面跟上句号。（还要有空格）</p>
<blockquote>
<blockquote>
<p>example: </p>
</blockquote>
<ol>
<li>Bird</li>
<li>McHale</li>
</ol>
</blockquote>
<p>Ⅶ. 链接（Links）<br>Markdown中有两种方式，实现链接，分别为内联方式和引用方式。 </p>
<ul>
<li>行内式<br>This is <a href="http://www.baidu.com/" title="度娘">baidu</a><br><a href="https://www.baidu.com/">baidu</a></li>
</ul>
<ul>
<li>参考式<br>This is [baidu example][id] reference-style link.<br>标记: [id]: <a href="https://www.baidu.com/">https://www.baidu.com/</a> “度娘”<br>或者: [id]: <a href="https://www.baidu.com/">https://www.baidu.com/</a> ‘度娘’ (简书不支持)<br>或者 [id]: <a href="https://www.baidu.com/">https://www.baidu.com/</a> (度娘)<br>Ⅷ. 图片（Images）<br>图片的处理方式和链接的处理方式，非常的类似。</li>
</ul>
<ul>
<li>行内式的图片语法<br>示例<br>  <img src="/assets/blogImg/rabbit.jpg" alt="Overload 仓助"><br>  <img src="/assets/blogImg/rabbit.jpg" alt="Overload 仓助" title="森林贤王"><br>Ⅸ.代码区块  <blockquote>
<p>   代码块</p>
</blockquote>
</li>
</ul>
<p>Ⅹ.分隔线 </p>
<hr>
<hr>
<hr>
]]></content>
      <tags>
        <tag>-Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL启动错误</title>
    <url>/2017/12/06/MySQL%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<a id="more"></a>

<blockquote>
<p>/etc/init.d/MySQL start 错误信息如下:</p>
</blockquote>
<ul>
<li>ERROR! MySQL server PID file could not be found!</li>
<li>Starting MySQL.. ERROR! The server quit without updating PID file (/usr/local/mysql/var/AYXXXXXXXXXXX.pid). </li>
</ul>
<ul>
<li>mysql日志文件的路径：/usr/local/mysql/var/</li>
<li>my.cnf文件路径：/etc/</li>
</ul>
<ul>
<li>启动会报错Starting MySQL.. ERROR! The server quit without updating PID file (/var/local/mysql/var/AYxxxxxxx.pid)</li>
<li>原因是因为 mysql-bin.0000的文件占满系统盘，磁盘空间不足导致无法写入。</li>
</ul>
<blockquote>
<p>解决方法:</p>
</blockquote>
<ol>
<li>删除所有mysql-bin.0000日志文件全部rm掉</li>
<li>修改在my.cnf 文件，找到 log-bin=mysql-bin 将其启注释掉，以后就不会产生2进制的mysql-bin.0000的日志文件</li>
</ol>
]]></content>
      <tags>
        <tag>lnmp</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx分发-指定文件名称</title>
    <url>/2020/12/07/Nginx%E5%88%86%E5%8F%91-%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%90%8D%E7%A7%B0/</url>
    <content><![CDATA[<p><strong>Nginx分发-指定文件名称</strong></p>
<a id="more"></a>

<p>一般在我们上传完资源文件之后，为了避免文件名冲突，会将文件名改成毫无意义的一段字符<br>其实，nginx是支持下载时重命名的，让文件名更加友好</p>
<p>eg: xxx.com/storage/uploads/2020-12-07-728632757453485.png?n=test</p>
<blockquote>
<p>有后缀：</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* .*\.(txt|jpg|png)(\?.*)?$</span> &#123; </span><br><span class="line">    <span class="attribute">if</span> ($request_uri <span class="regexp">~* ^.*\/(.*)\.(txt|jpg|png)(\?n=([^&amp;]+))$)</span> &#123;</span><br><span class="line">        <span class="attribute">add_header</span> Content-Disposition <span class="string">&quot;attachment;filename=$arg_n.<span class="variable">$2</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>无后缀：</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* [^/]+(?!.*/)</span> &#123;</span><br><span class="line">    <span class="attribute">if</span> ($request_uri <span class="regexp">~* [^/]+(?!.*/)(\?n=([^&amp;]+))$)</span> &#123;</span><br><span class="line">        <span class="attribute">add_header</span> Content-Disposition <span class="string">&quot;attachment;filename=$arg_n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Notice</strong></li>
</ul>
<blockquote>
<p>   如若需要，请戳 <a href="https://baishunhua.com/about/" target="_blank">[ About ]</a> 下联系我 欢迎联系.</p>
</blockquote>
<p>That’s it! enjoy :)</p>
]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx 反向代理</title>
    <url>/2019/09/19/Nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<a id="more"></a>

<p><a href="https://baishunhua.com/2018/03/21/CentOS-7-%E5%AE%89%E8%A3%85-Nginx-1-11-x/" target="_blank">安装nginx</a></p>
<blockquote>
<p>高防服务器上 nginx.conf 配置模板</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server_name  www.xxx.com;</span><br><span class="line">...</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">    proxy_redirect off;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;ip[原服务器ip];</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>nginx</tag>
        <tag>反向代理</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP 5.3、5.4、5.5、5.6、7 中的新特性</title>
    <url>/2017/09/26/PHP-5-3%E3%80%815-4%E3%80%815-5%E3%80%815-6%E3%80%817-%E4%B8%AD%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p><strong>PHP 5.3、5.4、5.5、5.6、7 中的新特性</strong></p>
<a id="more"></a>

<blockquote>
<p> 如果你使用的是基于 composer 和 PSR-4 的框架，这种写法是否能成功的加载类文件？其实是可以的，composer 注册的自动加载方法是在类被调用的时候根据类的命名空间去查找位置，这种写法对其没有影响。</p>
</blockquote>
<p><strong>PHP 7</strong></p>
<blockquote>
<p> 运算符（NULL 合并运算符）：</p>
</blockquote>
<p>把这个放在第一个说是因为我觉得它很有用。用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$a &#x3D; $_GET[&#39;a&#39;] ?? 1;</span><br><span class="line">&lt;!-- 它相当于 --&gt;</span><br><span class="line">$a &#x3D; isset($_GET[&#39;a&#39;]) ? $_GET[&#39;a&#39;] : 1;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 函数返回值类型声明</p>
</blockquote>
<p>官方文档提供的例子（注意 … 的边长参数语法在 PHP 5.6 以上的版本中才有）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function arraysSum(array ...$arrays): array </span><br><span class="line">&#123; </span><br><span class="line">    return array_map(function(array $array): int &#123; </span><br><span class="line">        return array_sum($array); </span><br><span class="line">    &#125;, $arrays); </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">print_r(arraysSum([1,2,3], [4,5,6], [7,8,9]));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从这个例子中可以看出现在函数（包括匿名函数）都可以指定返回值的类型。</p>
<p>这种声明的写法有些类似于 swift：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">func sayHello(personName: String) -&gt; String &#123; </span><br><span class="line">    let greeting &#x3D; &quot;Hello, &quot; + personName + &quot;!&quot; </span><br><span class="line">    return greeting </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>不过这里也有一个特点需要注意。PHP 7 增加了一个 declare 指令：strict_types，既使用严格模式。<br>严格模式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">declare(strict_types&#x3D;1); </span><br><span class="line"> </span><br><span class="line">function foo($a) : int </span><br><span class="line">&#123; </span><br><span class="line">    return $a; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">foo(1.0); </span><br><span class="line"># PHP Fatal error:  Uncaught TypeError: Return value of foo() must be of the type integer, float </span><br></pre></td></tr></table></figure>

<blockquote>
<p> 标量类型声明</p>
</blockquote>
<p>PHP 7 中的函数的形参类型声明可以是标量了。在 PHP 5 中只能是类名、接口、array 或者 callable (PHP 5.4，即可以是函数，包括匿名函数)，现在也可以使用 string、int、float和 bool 了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function sumOfInts(int ...$ints) </span><br><span class="line">&#123; </span><br><span class="line">    return array_sum($ints); </span><br><span class="line">&#125; </span><br><span class="line">var_dump(sumOfInts(2, &#39;3&#39;, 4.1)); </span><br></pre></td></tr></table></figure>

<blockquote>
<p> use 批量声明</p>
</blockquote>
<p>PHP 7 中 use 可以在一句话中声明多个类或函数或 const 了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use some&#x2F;namespace&#x2F;&#123;ClassA, ClassB, ClassC as C&#125;; </span><br><span class="line">use function some&#x2F;namespace&#x2F;&#123;fn_a, fn_b, fn_c&#125;; </span><br><span class="line">use const some&#x2F;namespace&#x2F;&#123;ConstA, ConstB, ConstC&#125;; </span><br></pre></td></tr></table></figure>

<hr>
<p><strong>PHP 5.6</strong></p>
<blockquote>
<p> 可以使用表达式定义常量</p>
</blockquote>
<p><a href="https://php.net/manual/zh/migration56.new-features.php" target="_blank">[ https://php.net/manual/zh/migration56.new-features.php ]</a> </p>
<p>在之前的 PHP 版本中，必须使用静态值来定义常量，声明属性以及指定函数参数默认值。 现在你可以使用包括数值、字符串字面量以及其他常量在内的数值表达式来 定义常量、声明属性以及设置函数参数默认值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">const ONE &#x3D; 1;</span><br><span class="line">const TWO &#x3D; ONE * 2;    &#x2F;&#x2F;定义常量时允许使用之前定义的常量进行计算</span><br><span class="line"></span><br><span class="line">class C &#123;</span><br><span class="line">    const THREE &#x3D; TWO + 1;</span><br><span class="line">    const ONE_THIRD &#x3D; ONE &#x2F; self::THREE;</span><br><span class="line">    const SENTENCE &#x3D; &#39;The value of THREE is &#39;.self::THREE;</span><br><span class="line"></span><br><span class="line">    public function f($a &#x3D; ONE + self::THREE) &#123; &#x2F;&#x2F;允许常量作为函数参数默认值</span><br><span class="line">        return $a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo (new C)-&gt;f().&quot;\n&quot;;</span><br><span class="line">echo C::SENTENCE;</span><br><span class="line">?&gt;; </span><br></pre></td></tr></table></figure>
<p>可以通过 const 关键字来定义类型为 array 的常量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">const ARR &#x3D; [&#39;a&#39;, &#39;b&#39;];</span><br><span class="line">echo ARR[0];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 使用 … 运算符定义变长参数函数</p>
</blockquote>
<p>现在可以不依赖 func_get_args()， 使用 … 运算符 来实现 变长参数函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function test(...$args)</span><br><span class="line">&#123;</span><br><span class="line">    print_r($args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(1,2,3);</span><br><span class="line">&#x2F;&#x2F;输出</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [0] &#x3D;&gt; 1</span><br><span class="line">    [1] &#x3D;&gt; 2</span><br><span class="line">    [2] &#x3D;&gt; 3</span><br><span class="line">)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p> 使用 ** 进行幂运算</p>
</blockquote>
<p>加入右连接运算符 ** 来进行幂运算。 同时还支持简写的 星星等 运算符，表示进行幂运算并赋值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">printf(2 ** 3); &#x2F;&#x2F; 8</span><br><span class="line"></span><br><span class="line">$a &#x3D; 2;</span><br><span class="line">$a **&#x3D; 3;</span><br><span class="line">printf($a);  &#x2F;&#x2F; 8</span><br></pre></td></tr></table></figure>

<blockquote>
<p> use function 以及 use const</p>
</blockquote>
<p>use 运算符可以在类中导入外部的函数和常量了。 对应的结构为 use function 和 use const。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace Name\Space &#123;</span><br><span class="line">    const FOO &#x3D; 42;</span><br><span class="line">    function f() &#123; echo __FUNCTION__.&quot;\n&quot;; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace &#123;</span><br><span class="line">    use const Name\Space\FOO;</span><br><span class="line">    use function Name\Space\f;</span><br><span class="line"></span><br><span class="line">    echo FOO.&quot;\n&quot;;</span><br><span class="line">    f();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 加入 hash_equals() 函数，以恒定的时间消耗来进行字符串比较，以避免时序攻击</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$expected  &#x3D; crypt(&#39;12345&#39;, &#39;$2a$07$usesomesillystringforsalt$&#39;);</span><br><span class="line">$incorrect &#x3D; crypt(&#39;1234&#39;,  &#39;$2a$07$usesomesillystringforsalt$&#39;);</span><br><span class="line"></span><br><span class="line">var_dump(hash_equals($expected, $incorrect)); &#x2F;&#x2F; false</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 加入 debugInfo()</p>
</blockquote>
<p>当使用 var_dump() 输出对象的时候，可以用来控制要输出的属性和值。返回值必须是个数组。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class C &#123;</span><br><span class="line">    private $prop;</span><br><span class="line"></span><br><span class="line">    public function __construct($val) &#123;</span><br><span class="line">        $this-&gt;prop &#x3D; $val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __debugInfo() &#123;</span><br><span class="line">        return array(</span><br><span class="line">                &quot;prop&quot; &#x3D;&gt; $this-&gt;prop</span><br><span class="line">            );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(new C(42));</span><br></pre></td></tr></table></figure>


<hr>
<p><strong>PHP 5.5</strong></p>
<blockquote>
<p> 新增 Generators</p>
</blockquote>
<p>yield关键字用于当函数需要返回一个迭代器的时候，逐个返回值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function number10()</span><br><span class="line">&#123;</span><br><span class="line">    for($i &#x3D; 1; $i &lt;&#x3D; 10; $i +&#x3D; 1)</span><br><span class="line">        yield $i;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 该函数的返回值是一个数组： --&gt;</span><br><span class="line">[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 新增 finally 关键字</p>
</blockquote>
<p>yield关键字用于当函数需要返回一个迭代器的时候，逐个返回值。</p>
<p><img src="/assets/blogImg/php/1.png" alt="ico原来的样子"></p>
<blockquote>
<p> foreach 支持 list()</p>
</blockquote>
<p>foreach 支持通过 list() 将嵌套数组分离到单独的变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$array &#x3D; [</span><br><span class="line">    [1, 2],</span><br><span class="line">    [3, 4],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">foreach ($array as list($a, $b)) &#123;</span><br><span class="line">    echo $a.$b\n&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> empty() 支持传入一个任意表达式，而不仅是一个变量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function always_false() &#123;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (empty(always_false())) &#123;</span><br><span class="line">    echo &#39;This will be printed.&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 直接通过下标获取访问数组和字符串字面量的元素或字符</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo [1, 2, 3][0]; &#x2F;&#x2F; 1</span><br><span class="line">echo &#39;PHP&#39;[0]; &#x2F;&#x2F; P</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 新的密码哈希 API</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;加密</span><br><span class="line">echo $hash &#x3D; password_hash(&#39;rasmuslerdorf&#39;, PASSWORD_DEFAULT);</span><br><span class="line">&#x2F;&#x2F;输出结果类似于：$2y$10$.vGA1O9wmRjrwAVXD98HNOgsNpDczlqm3Jq7KnEd1rVAGv3Fykk1a</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;验证</span><br><span class="line">if(password_verify(&#39;rasmuslerdorf&#39;,&#39;$2y$10$.vGA1O9wmRjrwAVXD98HNOgsNpDczlqm3Jq7KnEd1rVAGv3Fykk1a&#39;)) &#123; </span><br><span class="line">    echo &quot;密码正确&quot;;</span><br><span class="line">&#125; else &#123;  </span><br><span class="line">    echo &quot;密码错误&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 新增 boolval() 函数</p>
</blockquote>
<p>PHP已经实现了strval、intval和floatval的函数。为了达到一致性将添加boolval函数</p>
<blockquote>
<p> 新增 array_column() 函数</p>
</blockquote>
<p>可用来返回数组中指定的一列。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$records &#x3D; array(</span><br><span class="line">    array(&#39;id&#39; &#x3D;&gt; 2135,&#39;name&#39; &#x3D;&gt; &#39;John&#39;),</span><br><span class="line">    array(&#39;id&#39; &#x3D;&gt; 3245,&#39;name&#39; &#x3D;&gt; &#39;Smith&#39;),</span><br><span class="line">    array(&#39;id&#39; &#x3D;&gt; 5342,&#39;name&#39; &#x3D;&gt; &#39;Peter&#39;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从结果集中取出 name 列</span><br><span class="line">$names &#x3D; array_column($records, &#39;name&#39;);</span><br><span class="line">print_r($names);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;从结果集中总取出 name 列，用相应的 id 作为键值</span><br><span class="line">$names &#x3D; array_column($records, &#39;name&#39;, &#39;id&#39;);</span><br><span class="line">print_r($names);</span><br></pre></td></tr></table></figure>


<hr>
<p><strong>PHP 5.4</strong></p>
<blockquote>
<p> 新增 Traits</p>
</blockquote>
<p><a href="https://php.net/manual/zh/language.oop5.traits.php" target="_blank">[ https://php.net/manual/zh/language.oop5.traits.php ]</a> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Traits不能被单独实例化，只能被类所包含</span><br><span class="line">trait SayWorld</span><br><span class="line">&#123;</span><br><span class="line">    public function sayHello()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#39;World!&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyHelloWorld</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; 将SayWorld中的成员包含进来</span><br><span class="line">    use SayWorld;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$xxoo &#x3D; new MyHelloWorld();</span><br><span class="line">&#x2F;&#x2F; sayHello() 函数是来自 SayWorld 构件的</span><br><span class="line">$xxoo-&gt;sayHello();</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 新增短数组语法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 原来的数组写法</span><br><span class="line">$arr &#x3D; array(&quot;key&quot; &#x3D;&gt; &quot;value&quot;, &quot;key2&quot; &#x3D;&gt; &quot;value2&quot;);</span><br><span class="line">$arr &#x3D; array(1,2,3,4);</span><br><span class="line">&#x2F;&#x2F; 简写形式</span><br><span class="line">$arr &#x3D; [&quot;key&quot; &#x3D;&gt; &quot;value&quot;, &quot;key2&quot; &#x3D;&gt; &quot;value2&quot;];</span><br><span class="line">$arr &#x3D; [1,2,3,4];</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 新增支持对函数返回数组的成员访问解析</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print func()[0];</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 无论 php.ini 中是否设置 short_open_tag， 格式总是可用。</p>
</blockquote>
<p>这种简写形式被称为 Short Open Tag, 在 PHP5.3 起被默认开启，在 PHP5.4 起总是可用。 使用这种简写形式在 HTML 中嵌入 PHP 变量将会非常方便。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;? ... ?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 新增二进制直接量</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$bin &#x3D; bindec(&#39;110011&#39;); &#x2F;&#x2F;之前需要这样写</span><br><span class="line">$bin &#x3D; 0b110011;</span><br><span class="line">echo $bin; &#x2F;&#x2F;51</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 让 json 更懂中文</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo json_encode(&quot;中文&quot;, JSON_UNESCAPED_UNICODE);  </span><br><span class="line">&#x2F;&#x2F;&quot;中文&quot; </span><br></pre></td></tr></table></figure>


<hr>
<p><strong>PHP 5.3</strong></p>
<blockquote>
<p> 支持命名空间</p>
</blockquote>
<p><a href="https://php.net/manual/zh/language.namespaces.php" target="_blank">[ https://php.net/manual/zh/language.namespaces.php ]</a> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace my\name; &#x2F;&#x2F; 定义命名空间</span><br><span class="line"></span><br><span class="line">class MyClass &#123;&#125;</span><br><span class="line">const MYCONST &#x3D; 1;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new \my\name\MyClass;</span><br><span class="line">$class &#x3D; __NAMESPACE__.&#39;\MyClass&#39;;</span><br><span class="line">$b &#x3D; new $class;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 增加后期静态绑定</p>
</blockquote>
<p><a href="https://php.net/manual/zh/language.oop5.late-static-bindings.php" target="_blank">[ https://php.net/manual/zh/language.oop5.late-static-bindings.php ]</a> </p>
<p>在PHP中，我们可以在类中通过self关键字或者CLASS来判断或调用当前类。但有一个问题，如果我们是在子类中调用，得到的结果将是父类。因为在继承父类的时候，静态成员就已经被绑定了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    static public function callFuncXXOO()</span><br><span class="line">    &#123;</span><br><span class="line">        print self::funcXXOO();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static public function funcXXOO()</span><br><span class="line">    &#123;</span><br><span class="line">        return &quot;A::funcXXOO()&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A</span><br><span class="line">&#123;</span><br><span class="line">    static public function funcXXOO()</span><br><span class="line">    &#123;</span><br><span class="line">        return &quot;B::funcXXOO&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$b &#x3D; new B;</span><br><span class="line">$b-&gt;callFuncXXOO();</span><br><span class="line">&lt;!-- A::funcXXOO() --&gt;</span><br></pre></td></tr></table></figure>

<p>PHP 5.3.0中增加了一个static关键字来引用当前类，即实现了延迟静态绑定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    static public function callFuncXXOO()</span><br><span class="line">    &#123;</span><br><span class="line">        print static::funcXXOO();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 增加 goto 操作符</p>
</blockquote>
<p><a href="https://php.net/manual/zh/control-structures.goto.php" target="_blank">[ https://php.net/manual/zh/control-structures.goto.php ]</a> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">goto test;</span><br><span class="line">echo &#39;1&#39;;</span><br><span class="line"> </span><br><span class="line">test:</span><br><span class="line">echo &#39;2&#39;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;以上运行时会输出 2 </span><br></pre></td></tr></table></figure>

<blockquote>
<p> 新增两个魔术方法, allStatic 和 invoke</p>
</blockquote>
<p><a href="https://php.net/manual/zh/language.oop5.magic.php" target="_blank">[ https://php.net/manual/zh/language.oop5.magic.php ]</a> </p>
<p>用静态方式中调用一个不可访问方法时，callStatic() 会被调用。<br>当尝试以调用函数的方式调用一个对象时，invoke() 方法会被自动调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function __invoke($str)</span><br><span class="line">    &#123;</span><br><span class="line">        print &quot;A::__invoke(): &#123;$str&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a &#x3D; new A;</span><br><span class="line">$a(&quot;Hello World&quot;);</span><br><span class="line">&lt;!-- A::__invoke(): Hello World --&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 添加 Nowdoc 语法支持</p>
</blockquote>
<p><a href="https://php.net/manual/zh/language.types.string.php#language.types.str..." target="_blank">[ https://php.net/manual/zh/language.types.string.php#language.types.str… ]</a> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$str &#x3D; &lt;&lt;&lt;&#39;EOD&#39;</span><br><span class="line">Example of string</span><br><span class="line">spanning multiple lines</span><br><span class="line">using nowdoc syntax.</span><br><span class="line">EOD;</span><br></pre></td></tr></table></figure>
<p>就象 heredoc 结构类似于双引号字符串，Nowdoc 结构是类似于单引号字符串的。Nowdoc 结构很象 heredoc 结构，但是 nowdoc 中不进行解析操作。</p>
<blockquote>
<p> Heredoc 结构中可以用双引号来声明标识符了。</p>
</blockquote>
<p><a href="https://php.net/manual/zh/language.types.string.php#language.types.str..." target="_blank">[ https://php.net/manual/zh/language.types.string.php#language.types.str… ]</a> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &lt;&lt;&lt;&quot;FOOBAR&quot;</span><br><span class="line">Hello World!</span><br><span class="line">FOOBAR;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> const 关键字可用来在类定义之外定义常量了</p>
</blockquote>
<p><a href="https://php.net/manual/zh/language.constants.syntax.php" target="_blank">[ https://php.net/manual/zh/language.constants.syntax.php ]</a> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(&quot;CONSTANT_A&quot;, &quot;Hello world&quot;);</span><br><span class="line">const CONSTANT_B &#x3D; &#39;Hello World&#39;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 三元运算符可以简写省略中间的部分</p>
</blockquote>
<p>表达式 expr1 ?: expr3 ，当 expr1 为 TRUE 时返回 expr1，否则返回 expr3。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> expr1 ?: expr3</span><br></pre></td></tr></table></figure>


<hr>
<ul>
<li><strong>Notice</strong></li>
</ul>
<blockquote>
<p>   如若需要，请戳 <a href="https://shunhua.github.io/about/" target="_blank">[ About ]</a> 下联系我 欢迎联系.ok,enjoy it ! ~~</p>
</blockquote>
]]></content>
      <tags>
        <tag>PHP5.3+</tag>
        <tag>新特性</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Socket 基础教程</title>
    <url>/2018/03/12/PHP-Socket-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<a id="more"></a>

<p><strong>案例：socket通信演示</strong></p>
<blockquote>
<p> 服务器端：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;确保在连接客户端时不会超时</span><br><span class="line">set_time_limit(0);</span><br><span class="line"></span><br><span class="line">$ip &#x3D; &#39;127.0.0.1&#39;;</span><br><span class="line">$port &#x3D; 1935;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> +-------------------------------</span><br><span class="line"> *    @socket通信整个过程</span><br><span class="line"> +-------------------------------</span><br><span class="line"> *    @socket_create</span><br><span class="line"> *    @socket_bind</span><br><span class="line"> *    @socket_listen</span><br><span class="line"> *    @socket_accept</span><br><span class="line"> *    @socket_read</span><br><span class="line"> *    @socket_write</span><br><span class="line"> *    @socket_close</span><br><span class="line"> +--------------------------------</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;*----------------    以下操作都是手册上的    -------------------*&#x2F;</span><br><span class="line">if(($sock &#x3D; socket_create(AF_INET,SOCK_STREAM,SOL_TCP)) &lt; 0) &#123;</span><br><span class="line">    echo &quot;socket_create() 失败的原因是:&quot;.socket_strerror($sock).&quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(($ret &#x3D; socket_bind($sock,$ip,$port)) &lt; 0) &#123;</span><br><span class="line">    echo &quot;socket_bind() 失败的原因是:&quot;.socket_strerror($ret).&quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(($ret &#x3D; socket_listen($sock,4)) &lt; 0) &#123;</span><br><span class="line">    echo &quot;socket_listen() 失败的原因是:&quot;.socket_strerror($ret).&quot;\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    if (($msgsock &#x3D; socket_accept($sock)) &lt; 0) &#123;</span><br><span class="line">        echo &quot;socket_accept() failed: reason: &quot; . socket_strerror($msgsock) . &quot;\n&quot;;</span><br><span class="line">        break;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F;发到客户端</span><br><span class="line">        $msg &#x3D;&quot;测试成功！\n&quot;;</span><br><span class="line">        socket_write($msgsock, $msg, strlen($msg));</span><br><span class="line">        </span><br><span class="line">        echo &quot;测试成功了啊\n&quot;;</span><br><span class="line">        $buf &#x3D; socket_read($msgsock,8192);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        $talkback &#x3D; &quot;收到的信息:$buf\n&quot;;</span><br><span class="line">        echo $talkback;</span><br><span class="line">        </span><br><span class="line">        if(++$count &gt;&#x3D; 5)&#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;echo $buf;</span><br><span class="line">    socket_close($msgsock);</span><br><span class="line"></span><br><span class="line">&#125; while (true);</span><br><span class="line"></span><br><span class="line">socket_close($sock);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>


<blockquote>
<p> 客户端：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line">set_time_limit(0);</span><br><span class="line">echo &quot;&lt;h2&gt;TCP&#x2F;IP Connection&lt;&#x2F;h2&gt;\n&quot;;</span><br><span class="line"></span><br><span class="line">$port &#x3D; 1935;</span><br><span class="line">$ip &#x3D; &quot;127.0.0.1&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line"> +-------------------------------</span><br><span class="line"> *    @socket连接整个过程</span><br><span class="line"> +-------------------------------</span><br><span class="line"> *    @socket_create</span><br><span class="line"> *    @socket_connect</span><br><span class="line"> *    @socket_write</span><br><span class="line"> *    @socket_read</span><br><span class="line"> *    @socket_close</span><br><span class="line"> +--------------------------------</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">$socket &#x3D; socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line">if ($socket &lt; 0) &#123;</span><br><span class="line">    echo &quot;socket_create() failed: reason: &quot; . socket_strerror($socket) . &quot;\n&quot;;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    echo &quot;OK.\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;试图连接 &#39;$ip&#39; 端口 &#39;$port&#39;...\n&quot;;</span><br><span class="line">$result &#x3D; socket_connect($socket, $ip, $port);</span><br><span class="line">if ($result &lt; 0) &#123;</span><br><span class="line">    echo &quot;socket_connect() failed.\nReason: ($result) &quot; . socket_strerror($result) . &quot;\n&quot;;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    echo &quot;连接OK\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$in &#x3D; &quot;Ho\r\n&quot;;</span><br><span class="line">$in .&#x3D; &quot;first blood\r\n&quot;;</span><br><span class="line">$out &#x3D; &#39;&#39;;</span><br><span class="line"></span><br><span class="line">if(!socket_write($socket, $in, strlen($in))) &#123;</span><br><span class="line">    echo &quot;socket_write() failed: reason: &quot; . socket_strerror($socket) . &quot;\n&quot;;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">    echo &quot;发送到服务器信息成功！\n&quot;;</span><br><span class="line">    echo &quot;发送的内容为:&lt;font color&#x3D;&#39;red&#39;&gt;$in&lt;&#x2F;font&gt; &lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while($out &#x3D; socket_read($socket, 8192)) &#123;</span><br><span class="line">    echo &quot;接收服务器回传信息成功！\n&quot;;</span><br><span class="line">    echo &quot;接受的内容为:&quot;,$out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo &quot;关闭SOCKET...\n&quot;;</span><br><span class="line">socket_close($socket);</span><br><span class="line">echo &quot;关闭OK\n&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p><strong>案例：代码详解</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置一些基本的变量</span><br><span class="line">$host &#x3D; &quot;192.168.1.99&quot;;</span><br><span class="line">$port &#x3D; 1234;</span><br><span class="line">&#x2F;&#x2F; 设置超时时间</span><br><span class="line">set_time_limit(0);</span><br><span class="line">&#x2F;&#x2F; 创建一个Socket</span><br><span class="line">$socket &#x3D; socket_create(AF_INET, SOCK_STREAM, 0) or die(&quot;Could not createsocket\n&quot;);</span><br><span class="line">&#x2F;&#x2F;绑定Socket到端口</span><br><span class="line">$result &#x3D; socket_bind($socket, $host, $port) or die(&quot;Could not bind tosocket\n&quot;);</span><br><span class="line">&#x2F;&#x2F; 开始监听链接</span><br><span class="line">$result &#x3D; socket_listen($socket, 3) or die(&quot;Could not set up socketlistener\n&quot;);</span><br><span class="line">&#x2F;&#x2F; accept incoming connections</span><br><span class="line">&#x2F;&#x2F; 另一个Socket来处理通信</span><br><span class="line">$spawn &#x3D; socket_accept($socket) or die(&quot;Could not accept incomingconnection\n&quot;);</span><br><span class="line">&#x2F;&#x2F; 获得客户端的输入</span><br><span class="line">$input &#x3D; socket_read($spawn, 1024) or die(&quot;Could not read input\n&quot;);</span><br><span class="line">&#x2F;&#x2F; 清空输入字符串</span><br><span class="line">$input &#x3D; trim($input);</span><br><span class="line">&#x2F;&#x2F;处理客户端输入并返回结果</span><br><span class="line">$output &#x3D; strrev($input) . &quot;\n&quot;;</span><br><span class="line">socket_write($spawn, $output, strlen ($output)) or die(&quot;Could not write</span><br><span class="line">output\n&quot;);</span><br><span class="line">&#x2F;&#x2F; 关闭sockets</span><br><span class="line">socket_close($spawn);</span><br><span class="line">socket_close($socket);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>1.第一步是建立两个变量来保存Socket运行的服务器的IP地址和端口.你可以设置为你自己的服务器和端口(这个端口可以是1到65535之间的数字),前提是这个端口未被使用.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置两个变量</span><br><span class="line">$host  &#x3D;  &quot;192.168.1.99&quot; ;</span><br><span class="line">$port  &#x3D;  1234 ; </span><br></pre></td></tr></table></figure>
<p>2.在服务器端可以使用set_time_out()函数来确保PHP在等待客户端连接时不会超时</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 超时时间</span><br><span class="line">set_time_limit ( 0 ); 4 ; </span><br></pre></td></tr></table></figure>
<p>3.在前面的基础上,现在该使用socket_creat()函数创建一个Socket了—这个函数返回一个Socket句柄,这个句柄将用在以后所有的函数中.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 创建Socket</span><br><span class="line">$socket  &#x3D;  socket_create ( AF_INET ,  SOCK_STREAM ,  0 ) or die( &quot;Could not create</span><br><span class="line">socket\n&quot; ); </span><br><span class="line">&#x2F;&#x2F;第一个参数”AF_INET”用来指定域名;</span><br><span class="line">&#x2F;&#x2F;第二个参数”SOCK_STREM”告诉函数将创建一个什么类型的Socket(在这个例子中是TCP类型)</span><br><span class="line">因此,如果你想创建一个UDP Socket的话,你可以使用如下的代码:</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建 socket</span><br><span class="line">$socket  &#x3D;  socket_create ( AF_INET ,  SOCK_DGRAM ,  0 ) or die( &quot;Could not create</span><br><span class="line">socket\n&quot; ); </span><br></pre></td></tr></table></figure>
<p>4.一旦创建了一个Socket句柄,下一步就是指定或者绑定它到指定的地址和端口.这可以通过socket_bind()函数来完成.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 绑定 socket to 指定地址和端口</span><br><span class="line">$result  &#x3D;  socket_bind ( $socket ,  $host ,  $port ) or die( &quot;Could not bind to</span><br><span class="line">socket\n&quot; ); </span><br></pre></td></tr></table></figure>
<p>5.当Socket被创建好并绑定到一个端口后,就可以开始监听外部的连接了.PHP允许你由socket_listen()函数来开始一个监听,同时你可以指定一个数字(在这个例子中就是第二个参数:3)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 开始监听连接</span><br><span class="line">$result  &#x3D;  socket_listen ( $socket ,  3 ) or die( &quot;Could not set up socket</span><br><span class="line">listener\n&quot; ); </span><br></pre></td></tr></table></figure>
<p>6.到现在,你的服务器除了等待来自客户端的连接请求外基本上什么也没有做.一旦一个客户端的连接被收到,socket_accept()函数便开始起作用了,它接收连接请求并调用另一个子Socket来处理客户端–服务器间的信息.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;接受请求链接</span><br><span class="line">&#x2F;&#x2F; 调用子socket 处理信息</span><br><span class="line">$spawn  &#x3D;  socket_accept ( $socket ) or die( &quot;Could not accept incoming</span><br><span class="line">connection\n&quot; );</span><br><span class="line">&#x2F;&#x2F;这个子socket现在就可以被随后的客户端–服务器通信所用了. </span><br></pre></td></tr></table></figure>
<p>7.当一个连接被建立后,服务器就会等待客户端发送一些输入信息,这写信息可以由socket_read()函数来获得,并把它赋值给PHP的$input变量.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 读取客户端输入</span><br><span class="line">$input  &#x3D;  socket_read ( $spawn ,  1024 ) or die( &quot;Could not read input\n&quot; ); </span><br><span class="line">&#x2F;&#x2F;socker_read的第而个参数用以指定读入的字节数,你可以通过它来限制从客户端获取数据的大小.</span><br><span class="line">&#x2F;&#x2F;注意:socket_read函数会一直读取壳户端数据,直到遇见\n,\t或者\0字符.PHP脚本把这写字符看做是输入的结束符.</span><br></pre></td></tr></table></figure>
<p>8.现在服务器必须处理这些由客户端发来是数据(在这个例子中的处理仅仅包含数据的输入和回传到客户端).这部分可以由socket_write()函数来完成(使得由通信socket发回一个数据流到客户端成为可能)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 处理客户端输入并返回数据</span><br><span class="line">$output  &#x3D;  strrev ( $input ) .  &quot;\n&quot; ;</span><br><span class="line">socket_write ( $spawn ,  $output ,  strlen  ( $output )) or die( &quot;Could not write</span><br><span class="line">output\n&quot; ); </span><br></pre></td></tr></table></figure>
<p>9.一旦输出被返回到客户端,父/子socket都应通过socket_close()函数来终止</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 关闭 sockets</span><br><span class="line">socket_close ( $spawn );</span><br><span class="line">socket_close ( $socket ); </span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>php</tag>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>SELinux 状态</title>
    <url>/2017/08/11/SELinux-%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<p>##<strong>查看SELinux状态：</strong></p>
<blockquote>
<p>1、/usr/sbin/sestatus -v      ##如果SELinux status参数为enabled即为开启状态—— </p>
</blockquote>
<a id="more"></a>

<p><img src="/assets/blogImg/reduce-http.jpg" alt="ico原来的样子"></p>
<p>1、/usr/sbin/sestatus -v      ##如果SELinux status参数为enabled即为开启状态<br>SELinux status:                 enabled<br>2、getenforce                 ##也可以用这个命令检查<br>关闭SELinux：<br>1、临时关闭（不用重启机器）：<br>setenforce 0                  ##设置SELinux 成为permissive模式<br>                              ##setenforce 1 设置SELinux 成为enforcing模式<br>2、修改配置文件需要重启机器：<br>修改/etc/selinux/config 文件<br>将SELINUX=enforcing改为SELINUX=disabled<br>重启机器即可</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python scrapy入门教程</title>
    <url>/2017/09/26/Python-scrapy%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>Python scrapy入门教程</strong> </p>
<a id="more"></a>

<p><strong>Python 安装</strong></p>
<p>Python下载地址：<a href="https://www.python.org/downloads/windows/" target="_blank">[ Python-Downloads ]</a> </p>
<p>如果您已经熟悉 Python 包的安装，您可以从 PyPI 安装 Scrapy 及其依赖：</p>
<blockquote>
<p> pip install Scrapy</p>
</blockquote>
<p>win32api问题解决<br>安装pywin32地址：<a href="http://sourceforge.net/projects/pywin32/" target="_blank">[ 安装pywin32 ]</a> </p>
<blockquote>
<p> No module named win32api问题解决</p>
</blockquote>
<p>请确保下载与系统（win32或amd64）匹配的版本</p>
<blockquote>
<p> 引导完成以下任务</p>
</blockquote>
<ul>
<li>创建一个新的 Scrapy 项目</li>
<li>编写 爬虫 以抓取网站并提取数据</li>
<li>使用命令行导出已爬取的数据</li>
<li>将爬虫更改为递归跟进链接</li>
<li>使用爬虫参数</li>
</ul>
<p>在开始爬取之前，您必须设置一个新的Scrapy项目。进入您要存储代码的目录，并运行如下命令：</p>
<blockquote>
<p> scrapy startproject tutorial</p>
</blockquote>
<p>这将创建一个具有以下内容的 tutorial 目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tutorial&#x2F;</span><br><span class="line">    scrapy.cfg            # 部署配置文件</span><br><span class="line"></span><br><span class="line">    tutorial&#x2F;             # 项目的 Python 模块，您将从这里加入您的代码</span><br><span class="line">        __init__.py</span><br><span class="line"></span><br><span class="line">        items.py          # 项目的 item 定义文件</span><br><span class="line"></span><br><span class="line">        pipelines.py      # 项目的 pipelines 文件</span><br><span class="line"></span><br><span class="line">        settings.py       # 项目的 settings 文件</span><br><span class="line"></span><br><span class="line">        spiders&#x2F;          # 放置spider代码的目录.</span><br><span class="line">            __init__.py</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 我们的第一个爬虫</p>
</blockquote>
<p>爬虫是您定义的类，Scrapy用它从网站（或一组网站）中抓取信息。它们必须子类化 scrapy.Spider 并定义初始请求，可选地如何跟踪页面中的链接，以及如何解析下载的页面内容以提取数据。</p>
<p>这是我们第一个爬虫的代码。将其保存在项目中的 tutorial / spiders 目录下名为 shunhua_spider.py 的文件中：</p>
<pre><code>import scrapy

class QuotesSpider(scrapy.Spider):
    name = &quot;shunhua&quot;

    def start_requests(self):
        urls = [
            &#39;https://shunhua.github.io/&#39;,
            &#39;https://shunhua.github.io/page/2/&#39;,
        ]
        for url in urls:
            yield scrapy.Request(url=url, callback=self.parse)

    def parse(self, response):
        page = response.url.split(&quot;/&quot;)[-2]
        filename = &#39;shunhua-%s.html&#39; % page
        with open(filename, &#39;wb&#39;) as f:
            f.write(response.body)
        self.log(&#39;Saved file %s&#39; % filename)
</code></pre>
<blockquote>
<p> 如何运行我们的爬虫 </p>
</blockquote>
<p>要让我们的蜘蛛工作，进入项目的根目录并运行： </p>
<blockquote>
<p> scrapy crawl shunhua </p>
</blockquote>
<hr>
<ul>
<li><strong>Notice</strong></li>
</ul>
<blockquote>
<p>   如若需要，请戳 <a href="https://shunhua.github.io/about/" target="_blank">[ About ]</a> 下联系我 欢迎联系.ok,enjoy it ! ~~</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift学习笔记NO.1</title>
    <url>/2017/09/25/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0NO-1/</url>
    <content><![CDATA[<p><strong>Swift学习笔记NO.1</strong> </p>
<a id="more"></a>

<p><strong>Swift 教程</strong></p>
<blockquote>
<p> Swift 是一种支持多编程范式和编译式的开源编程语言,苹果于2014年WWDC（苹果开发者大会）发布，用于开发 iOS，OS X 和 watchOS 应用程序。<br>Swift 结合了 C 和 Objective-C 的优点并且不受 C 兼容性的限制。<br>Swift 在 Mac OS 和 iOS 平台可以和 Object-C 使用相同的运行环境。<br>2015年6月8日，苹果于WWDC 2015上宣布，Swift将开放源代码，包括编译器和标准库。</p>
</blockquote>
<p>第一个 Swift 程序当然从输出 “Hello, World!” 开始</p>
<blockquote>
<p> 代码如下所示：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var myString &#x3D; &quot;Hello, World!&quot;</span><br><span class="line">print(myString)</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 实例解析：</p>
</blockquote>
<ul>
<li>var myString = “Hello, World!” : 使用 var 关键字定义一个变量 myString，值为 Hello, World!</li>
<li>print : 输出变量的值</li>
</ul>
<p><strong>Swift 环境搭建</strong></p>
<blockquote>
<p> Swift是一门开源的编程语言，该语言用于开发OS X和iOS应用程序。<br>在正式开发应用程序前，我们需要搭建Swift开发环境，以便更好友好的使用各种开发工具和语言进行快速应用开发。由于Swift开发环境需要在OS X系统中运行，因此其环境的搭建将不同于Windows环境，下面就一起来学习一下swift开发环境的搭建方法。</p>
</blockquote>
<p>成功搭建swift开发环境的前题：</p>
<ul>
<li>必须拥有一台苹果电脑。因为集成开发环境XCode只能运行在OS X系统上。</li>
<li>电脑系统必须在OS 10.9.3及以上。</li>
<li>电脑必须安装Xcode集成开发环境。</li>
</ul>
<blockquote>
<p> Swift 开发工具Xcode下载</p>
</blockquote>
<ul>
<li><a href="https://swift.org/download/#latest-development-snapshots" target="_blank">[ Swift 源代码下载 ]</a></li>
<li><a href="https://developer.apple.com/xcode/download/" target="_blank">[ Swift开发工具官网地址 ]</a></li>
<li><a href="http://rj.baidu.com/soft/detail/40233.html" target="_blank">[ Swift 开发工具百度软件中心下载（国内比较快） ]</a></li>
</ul>
<p>下载完成后，双击下载的 dmg 文件安装，安装完成后我们将 Xcode 图标踢移动到应用文件夹。<br> <img src="/assets/blogImg/swift/xcode2.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 第一个 Swift 程序</p>
</blockquote>
<p>Xcode 安装完成后，我们就可以开始编写 Swift 代码了。<br>接下来我们在应用文件夹打开 Xcode，打开后在屏幕顶部选择 File =&gt; New =&gt; Playground。<br><img src="/assets/blogImg/swift/xc1.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> 接着 为 playground 设置一个名字并选择 iOS 平台。</p>
</blockquote>
<p><img src="/assets/blogImg/swift/xc2.jpg" alt="ico原来的样子"></p>
<blockquote>
<p> Swift 的 playground 就像是一个可交互的文档，它是用来练手学swift的，写一句代码出一行结果（右侧），可以实时查看代码结果，是学习swift语言的利器！</p>
</blockquote>
<p><img src="/assets/blogImg/swift/xc3.jpg" alt="ico原来的样子"> </p>
<p>以下是 Swift Playground 窗口默认的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">var str &#x3D; &quot;Hello, playground&quot;</span><br></pre></td></tr></table></figure>
<p>如果你想创建 OS x 程序，需要导入 Cocoa 包 import Cocoa 代码如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line">var str &#x3D; &quot;Hello, playground&quot;</span><br></pre></td></tr></table></figure>

<p><strong>创建第一个项目</strong></p>
<blockquote>
<p> 1、打开 xcode 工具，选择 File =&gt; New =&gt; Project</p>
</blockquote>
<p><img src="/assets/blogImg/swift/xc4.jpg" alt="ico原来的样子"> </p>
<blockquote>
<p> 2、我们选择一个”Single View Application”，并点击”next”，创建一个简单示例app应用。</p>
</blockquote>
<p><img src="/assets/blogImg/swift/xc5.jpg" alt="ico原来的样子"> </p>
<blockquote>
<p> 3、接着我们输入项目名称（ProductName),公司名称（Organization Name),公司标识前缀名（Organization identifier) 还要选择开发语言(Language),选择设备（Devices)。<br>其中Language有两个选项：Objective-c和swift，因为我们是学习swift当然选择swift项了。 点击”Next”下一步。</p>
</blockquote>
<p><img src="/assets/blogImg/swift/xc6.jpg" alt="ico原来的样子"> </p>
<blockquote>
<p> 4、选择存放的目录，如果要使用Git源代码管理，将勾上Source Control的create git repository on My Mac. 点击create创建项目。</p>
</blockquote>
<p><img src="/assets/blogImg/swift/xc7.jpg" alt="ico原来的样子"> </p>
<blockquote>
<p> 5、项目创建后，默认生成了一个示例文件，可以看到swift将oc中的h和m文件合并成了一个文件（即swift后缀名文件). Main.storyboard相当于xib文件，有比xib更多的功能。</p>
</blockquote>
<p><img src="/assets/blogImg/swift/xc8.jpg" alt="ico原来的样子"> </p>
<blockquote>
<p> 6、打开main.storyboard,默认看到一个简单的空白的应用界面，大小为平板界面大小。 如果开发都只需要开发兼容iphone手机的app,那么可以把Use Auto Layout的勾去掉（默认为勾上）。</p>
</blockquote>
<p><img src="/assets/blogImg/swift/xc9.jpg" alt="ico原来的样子"> </p>
<blockquote>
<p> 7、弹出了一个对话框，让我们选择界面尺寸，iPhone或都 iPad。我们选择iPhone的尺寸。</p>
</blockquote>
<p><img src="/assets/blogImg/swift/xc10.jpg" alt="ico原来的样子"> </p>
<blockquote>
<p> 8、我们为界面添加点内容，在右下方找到Text控件，将它拖入storyboard上，并双击写入文本”Hello World!”。</p>
</blockquote>
<p><img src="/assets/blogImg/swift/xc11.jpg" alt="ico原来的样子"> </p>
<hr>
<ul>
<li><strong>Notice</strong></li>
</ul>
<blockquote>
<p>   如若需要，请戳 <a href="https://shunhua.github.io/about/" target="_blank">[ About ]</a> 下联系我 欢迎联系.ok,enjoy it ! ~~</p>
</blockquote>
]]></content>
      <tags>
        <tag>Swift</tag>
      </tags>
  </entry>
  <entry>
    <title>Swift学习笔记NO.2</title>
    <url>/2017/09/25/Swift%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0NO-2/</url>
    <content><![CDATA[<p><strong>Swift学习笔记NO.2</strong> </p>
<a id="more"></a>

<p><strong>Swift 基本语法</strong></p>
<blockquote>
<p> 在上一章节中我们已经讲到如何创建 Swift 语言的 “Hello, World!” 程序。现在我们来复习下。<br>如果创建的是 OS X playground 需要引入 Cocoa ：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">var myString &#x3D; &quot;Hello, World!&quot;</span><br><span class="line">print(myString)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 如果我们想创建 iOS playground 则需要引入 UIKit :</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import UIKit</span><br><span class="line">var myString &#x3D; &quot;Hello, World!&quot;</span><br><span class="line">print(myString)</span><br></pre></td></tr></table></figure>

<p><strong>Swift 数据类型</strong></p>
<blockquote>
<p> 实例：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; varA 会被推测为 Int 类型 </span><br><span class="line">var varA &#x3D; 42</span><br><span class="line">print(varA)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; varB 会被推测为 Double 类型  </span><br><span class="line">var varB &#x3D; 3.14159</span><br><span class="line">print(varB)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; varC 也会被推测为 Double 类型   </span><br><span class="line">var varC &#x3D; 3 + 0.14159</span><br><span class="line">print(varC)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 执行以上代码，输出结果为：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">42</span><br><span class="line">3.14159</span><br><span class="line">3.14159</span><br></pre></td></tr></table></figure>

<p><strong>Swift 变量</strong></p>
<blockquote>
<p> 变量声明意思是告诉编译器在内存中的哪个位置上为变量创建多大的存储空间。<br>在使用变量前，你需要使用 var 关键字声明它，如下所示：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">var varA &#x3D; 42</span><br><span class="line">print(varA)</span><br><span class="line"></span><br><span class="line">var varB:Float</span><br><span class="line"></span><br><span class="line">varB &#x3D; 3.14159</span><br><span class="line">print(varB)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 执行以上代码，输出结果为：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">42</span><br><span class="line">3.14159</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 变量输出</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">var name &#x3D; &quot;菜鸟教程&quot;</span><br><span class="line">var site &#x3D; &quot;http:&#x2F;&#x2F;www.runoob.com&quot;</span><br><span class="line"></span><br><span class="line">print(&quot;\(name)的官网地址为：\(site)&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>Swift 可选(Optionals)类型</strong></p>
<blockquote>
<p> Swift 的可选（Optional）类型，用于处理值缺失的情况。可选表示”那儿有一个值，并且它等于 x “或者”那儿没有值”。<br>Swfit语言定义后缀？作为命名类型Optional的简写，换句话说，以下两种声明是相等的：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var optionalInteger: Int?</span><br><span class="line">var optionalInteger: Optional&lt;Int&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 执行以上代码，输出结果为：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">42</span><br><span class="line">3.14159</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 实例输出</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">var myString:String? &#x3D; nil</span><br><span class="line"></span><br><span class="line">if myString !&#x3D; nil &#123;</span><br><span class="line">    print(myString)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    print(&quot;字符串为 nil&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Swift 常量</strong></p>
<blockquote>
<p> 常量一旦设定，在程序运行时就无法改变其值。<br>常量可以是任何的数据类型如：整型常量，浮点型常量，字符常量或字符串常量。同样也有枚举类型的常量：<br>常量类似于变量，区别在于常量的值一旦设定就不能改变，而变量的值可以随意更改。<br>常量使用关键字 let 来声明，语法如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">let constA &#x3D; 42</span><br><span class="line">print(constA)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 执行以上代码，输出结果为：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">42</span><br></pre></td></tr></table></figure>

<p><strong>Swift 运算符</strong></p>
<blockquote>
<p> 运算符是一个符号，用于告诉编译器执行一个数学或逻辑运算。<br>Swift 提供了以下几种运算符：算术运算符、比较运算符、逻辑运算符、位运算符、赋值运算符、区间运算符、其他运算符</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">var A &#x3D; 10</span><br><span class="line">var B &#x3D; 20</span><br><span class="line"></span><br><span class="line">print(&quot;A + B 结果为：\(A + B)&quot;)</span><br><span class="line">print(&quot;A - B 结果为：\(A - B)&quot;)</span><br><span class="line">print(&quot;A * B 结果为：\(A * B)&quot;)</span><br><span class="line">print(&quot;B &#x2F; A 结果为：\(B &#x2F; A)&quot;)</span><br><span class="line">A +&#x3D; 1   &#x2F;&#x2F; 类似 A++</span><br><span class="line">print(&quot;A +&#x3D; 1 后 A 的值为 \(A)&quot;)</span><br><span class="line">B -&#x3D; 1   &#x2F;&#x2F; 类似 B--</span><br><span class="line">print(&quot;B -&#x3D; 1 后 B 的值为 \(B)&quot;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p> 执行以上代码，输出结果为：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A + B 结果为：30</span><br><span class="line">A - B 结果为：-10</span><br><span class="line">A * B 结果为：200</span><br><span class="line">B &#x2F; A 结果为：2</span><br><span class="line">A +&#x3D; 1 后 A 的值为 11</span><br><span class="line">B -&#x3D; 1 后 B 的值为 19</span><br></pre></td></tr></table></figure>

<p><strong>Swift 条件语句</strong></p>
<blockquote>
<p> 运算符是一个符号，用于告诉编译器执行一个数学或逻辑运算。<br>Swift 提供了以下几种运算符：算术运算符、比较运算符、逻辑运算符、位运算符、赋值运算符、区间运算符、其他运算符</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if boolean_expression &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Swift 循环</strong></p>
<blockquote>
<p> Swift for-in 循环用于遍历一个集合里面的所有元素，例如由数字表示的区间、数组中的元素、字符串中的字符。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for index in var &#123;</span><br><span class="line">   循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Swift 字符串</strong></p>
<blockquote>
<p> 可以通过使用字符串字面量或 String 类的实例来创建一个字符串：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 使用字符串字面量</span><br><span class="line">var stringA &#x3D; &quot;Hello, World!&quot;</span><br><span class="line">print( stringA )</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; String 实例化</span><br><span class="line">var stringB &#x3D; String(&quot;Hello, World!&quot;)</span><br><span class="line">print( stringB )</span><br></pre></td></tr></table></figure>

<p><strong>Swift 字符(Character)</strong></p>
<blockquote>
<p> Swift 的字符是一个单一的字符字符串字面量，数据类型为 Character</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">let char1: Character &#x3D; &quot;A&quot;</span><br><span class="line">let char2: Character &#x3D; &quot;B&quot;</span><br><span class="line"></span><br><span class="line">print(&quot;char1 的值为 \(char1)&quot;)</span><br><span class="line">print(&quot;char2 的值为 \(char2)&quot;)</span><br></pre></td></tr></table></figure>

<p><strong>Swift 数组</strong></p>
<blockquote>
<p> 我们可以使用构造语法来创建一个由特定数据类型构成的空数组：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line">var someInts &#x3D; [Int](repeating: 10, count: 3)</span><br><span class="line">var someVar &#x3D; someInts[0]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var someInts &#x3D; [Int]()</span><br><span class="line"></span><br><span class="line">someInts.append(20)</span><br><span class="line">someInts.append(30)</span><br><span class="line">someInts +&#x3D; [40]</span><br><span class="line"></span><br><span class="line">var someVar &#x3D; someInts[0]</span><br><span class="line"></span><br><span class="line">print( &quot;第一个元素的值 \(someVar)&quot; )</span><br><span class="line">print( &quot;第二个元素的值 \(someInts[1])&quot; )</span><br><span class="line">print( &quot;第三个元素的值 \(someInts[2])&quot; )</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Swift 字典</strong></p>
<blockquote>
<p> 我们可以使用构造语法来创建一个由特定数据类型构成的空数组：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">var someDict:[Int:String] &#x3D; [1:&quot;One&quot;, 2:&quot;Two&quot;, 3:&quot;Three&quot;]</span><br><span class="line"></span><br><span class="line">var someVar &#x3D; someDict[1]</span><br><span class="line"></span><br><span class="line">print( &quot;key &#x3D; 1 的值为 \(someVar)&quot; )</span><br><span class="line">print( &quot;key &#x3D; 2 的值为 \(someDict[2])&quot; )</span><br><span class="line">print( &quot;key &#x3D; 3 的值为 \(someDict[3])&quot; )</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Swift 函数</strong></p>
<blockquote>
<p> Swift 定义函数使用关键字 func。：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">func runoob(site: String) -&gt; String &#123;</span><br><span class="line">    return (site)</span><br><span class="line">&#125;</span><br><span class="line">print(runoob(site: &quot;www.runoob.com&quot;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Swift 闭包</strong></p>
<blockquote>
<p> 闭包(Closures)是自包含的功能代码块，可以在代码中使用或者用来作为参数传值。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">let divide &#x3D; &#123;(val1: Int, val2: Int) -&gt; Int in </span><br><span class="line">   return val1 &#x2F; val2 </span><br><span class="line">&#125;</span><br><span class="line">let result &#x3D; divide(200, 20)</span><br><span class="line">print (result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Swift 枚举</strong></p>
<blockquote>
<p> 枚举简单的说也是一种数据类型，只不过是这种数据类型只包含自定义的特定数据，它是一组有共同特性的数据的集合</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 定义枚举</span><br><span class="line">enum DaysofaWeek &#123;</span><br><span class="line">    case Sunday</span><br><span class="line">    case Monday</span><br><span class="line">    case TUESDAY</span><br><span class="line">    case WEDNESDAY</span><br><span class="line">    case THURSDAY</span><br><span class="line">    case FRIDAY</span><br><span class="line">    case Saturday</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var weekDay &#x3D; DaysofaWeek.THURSDAY</span><br><span class="line">weekDay &#x3D; .THURSDAY</span><br><span class="line">switch weekDay</span><br><span class="line">&#123;</span><br><span class="line">case .Sunday:</span><br><span class="line">    print(&quot;星期天&quot;)</span><br><span class="line">case .Monday:</span><br><span class="line">    print(&quot;星期一&quot;)</span><br><span class="line">case .TUESDAY:</span><br><span class="line">    print(&quot;星期二&quot;)</span><br><span class="line">case .WEDNESDAY:</span><br><span class="line">    print(&quot;星期三&quot;)</span><br><span class="line">case .THURSDAY:</span><br><span class="line">    print(&quot;星期四&quot;)</span><br><span class="line">case .FRIDAY:</span><br><span class="line">    print(&quot;星期五&quot;)</span><br><span class="line">case .Saturday:</span><br><span class="line">    print(&quot;星期六&quot;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Swift 结构体</strong></p>
<blockquote>
<p> Swift 结构体是构建代码所用的一种通用且灵活的构造体</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">struct studentMarks &#123;</span><br><span class="line">   var mark1 &#x3D; 100</span><br><span class="line">   var mark2 &#x3D; 78</span><br><span class="line">   var mark3 &#x3D; 98</span><br><span class="line">&#125;</span><br><span class="line">let marks &#x3D; studentMarks()</span><br><span class="line">print(&quot;Mark1 是 \(marks.mark1)&quot;)</span><br><span class="line">print(&quot;Mark2 是 \(marks.mark2)&quot;)</span><br><span class="line">print(&quot;Mark3 是 \(marks.mark3)&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>Swift 类</strong></p>
<blockquote>
<p> Swift 类是构建代码所用的一种通用且灵活的构造体。<br>我们可以为类定义属性（常量、变量）和方法。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Cocoa</span><br><span class="line"></span><br><span class="line">class MarksStruct &#123;</span><br><span class="line">   var mark: Int</span><br><span class="line">   init(mark: Int) &#123;</span><br><span class="line">      self.mark &#x3D; mark</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class studentMarks &#123;</span><br><span class="line">   var mark1 &#x3D; 300</span><br><span class="line">   var mark2 &#x3D; 400</span><br><span class="line">   var mark3 &#x3D; 900</span><br><span class="line">&#125;</span><br><span class="line">let marks &#x3D; studentMarks()</span><br><span class="line">print(&quot;Mark1 is \(marks.mark1)&quot;)</span><br><span class="line">print(&quot;Mark2 is \(marks.mark2)&quot;)</span><br><span class="line">print(&quot;Mark3 is \(marks.mark3)&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><strong>Notice</strong></li>
</ul>
<blockquote>
<p>   如若需要，请戳 <a href="https://shunhua.github.io/about/" target="_blank">[ About ]</a> 下联系我 欢迎联系.ok,enjoy it ! ~~</p>
</blockquote>
]]></content>
      <tags>
        <tag>Swift</tag>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>AntV 蚂蚁数据可视化G6|Graphin</title>
    <url>/2021/12/01/antV-%E8%9A%82%E8%9A%81%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96G6-Graphin/</url>
    <content><![CDATA[<p><img src="/assets/blogImg/antV-g6.png" alt="AntV"></p>
<a id="more"></a>

<p>中文官网： <a href="https://antv.gitee.io/zh" target="_blank">[ AntV中文官网 ]</a><br>Github地址： <a href="https://github.com/antvis/g6" target="_blank">[ AntV G6 ]</a><br>参考文档： <a href="https://g6.antv.vision/zh/docs/manual/introduction" target="_blank">[ G6官方文档 ]</a><br><strong>什么是 G6</strong><br>G6 是一个图可视化引擎。它提供了图的绘制、布局、分析、交互、动画等图可视化的基础能力。旨在让关系变得透明，简单。让用户获得关系数据的 Insight。<br><strong>安装 &amp; 引用</strong><br>使用命令行在项目目录下执行以下命令：</p>
<blockquote>
<p> npm install –save @antv/g6</p>
</blockquote>
<p>创建一个 G6 的关系图仅需要下面几个步骤：</p>
<ul>
<li>创建关系图的 HTML 容器；</li>
<li>数据准备；</li>
<li>创建关系图；</li>
<li>配置数据源，渲染。</li>
</ul>
<p><strong><em>Step 1 创建容器</em></strong><br>需要在 HTML 中创建一个用于容纳 G6 绘制的图的容器，通常为 div  标签。G6 在绘制时会在该容器下追加 canvas 标签，然后将图绘制在其中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;mountNode&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><strong><em>Step 2 数据准备</em></strong><br>引入 G6 的数据源为 JSON 格式的对象。该对象中需要有节点（nodes）和边（edges）字段，分别用数组表示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const data &#x3D; &#123;</span><br><span class="line">  &#x2F;&#x2F; 点集</span><br><span class="line">  nodes: [</span><br><span class="line">    &#123;</span><br><span class="line">      id: &#39;node1&#39;, &#x2F;&#x2F; String，该节点存在则必须，节点的唯一标识</span><br><span class="line">      x: 100, &#x2F;&#x2F; Number，可选，节点位置的 x 值</span><br><span class="line">      y: 200, &#x2F;&#x2F; Number，可选，节点位置的 y 值</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      id: &#39;node2&#39;, &#x2F;&#x2F; String，该节点存在则必须，节点的唯一标识</span><br><span class="line">      x: 300, &#x2F;&#x2F; Number，可选，节点位置的 x 值</span><br><span class="line">      y: 200, &#x2F;&#x2F; Number，可选，节点位置的 y 值</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  &#x2F;&#x2F; 边集</span><br><span class="line">  edges: [</span><br><span class="line">    &#123;</span><br><span class="line">      source: &#39;node1&#39;, &#x2F;&#x2F; String，必须，起始点 id</span><br><span class="line">      target: &#39;node2&#39;, &#x2F;&#x2F; String，必须，目标点 id</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>注意</p>
<ul>
<li>nodes 数组中包含节点对象。每个节点对象中唯一的、必要的 id 以标识不同的节点，x、 y 指定该节点的位置；</li>
<li>edges 数组中包含边对象。source 和 target 是每条边的必要属性，分别代表了该边的起始点 id 与 目标点 id。</li>
<li>点和边的其他属性参见链接：内置节点 和 内置边。</li>
</ul>
<p><strong><em>Step 3 创建关系图</em></strong><br>创建关系图（实例化）时，至少需要为图设置容器、宽和高。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const graph &#x3D; new G6.Graph(&#123;</span><br><span class="line">  container: &#39;mountNode&#39;, &#x2F;&#x2F; String | HTMLElement，必须，在 Step 1 中创建的容器 id 或容器本身</span><br><span class="line">  width: 800, &#x2F;&#x2F; Number，必须，图的宽度</span><br><span class="line">  height: 500, &#x2F;&#x2F; Number，必须，图的高度</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong><em>Step 4 配置数据源，渲染</em></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph.data(data); &#x2F;&#x2F; 读取 Step 2 中的数据源到图上</span><br><span class="line">graph.render(); &#x2F;&#x2F; 渲染图</span><br></pre></td></tr></table></figure>

<p>完整代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">    &lt;title&gt;Tutorial Demo&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &#x2F;* 图的画布容器 *&#x2F;</span><br><span class="line">    &lt;div id&#x3D;&quot;mountNode&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &#x2F;* 引入 G6 *&#x2F;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;gw.alipayobjects.com&#x2F;os&#x2F;antv&#x2F;pkg&#x2F;_antv.g6-3.7.1&#x2F;dist&#x2F;g6.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      &#x2F;&#x2F; 定义数据源</span><br><span class="line">      const data &#x3D; &#123;</span><br><span class="line">        &#x2F;&#x2F; 点集</span><br><span class="line">        nodes: [</span><br><span class="line">          &#123;</span><br><span class="line">            id: &#39;node1&#39;,</span><br><span class="line">            x: 100,</span><br><span class="line">            y: 200,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            id: &#39;node2&#39;,</span><br><span class="line">            x: 300,</span><br><span class="line">            y: 200,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        &#x2F;&#x2F; 边集</span><br><span class="line">        edges: [</span><br><span class="line">          &#x2F;&#x2F; 表示一条从 node1 节点连接到 node2 节点的边</span><br><span class="line">          &#123;</span><br><span class="line">            source: &#39;node1&#39;,</span><br><span class="line">            target: &#39;node2&#39;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      &#x2F;&#x2F; 创建 G6 图实例</span><br><span class="line">      const graph &#x3D; new G6.Graph(&#123;</span><br><span class="line">        container: &#39;mountNode&#39;, &#x2F;&#x2F; 指定图画布的容器 id，与第 9 行的容器对应</span><br><span class="line">        &#x2F;&#x2F; 画布宽高</span><br><span class="line">        width: 800,</span><br><span class="line">        height: 500,</span><br><span class="line">      &#125;);</span><br><span class="line">      &#x2F;&#x2F; 读取数据</span><br><span class="line">      graph.data(data);</span><br><span class="line">      &#x2F;&#x2F; 渲染图</span><br><span class="line">      graph.render();</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>AntV</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7下lnmp 添加、删除虚拟主机</title>
    <url>/2017/09/15/centos7%E4%B8%8Blnmp-%E6%B7%BB%E5%8A%A0%E3%80%81%E5%88%A0%E9%99%A4%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA/</url>
    <content><![CDATA[<a id="more"></a>

<p><strong>添加网站(虚拟主机</strong></p>
<blockquote>
<p> 执行：lnmp vhost add 出现如下界面：</p>
</blockquote>
<p><img src="/assets/blogImg/lnmp/lnmp1.4-vhost-add-1.png" alt="ico原来的样子"></p>
<blockquote>
<p> 这里要输入要添加网站的域名，我们已添加<a href="http://www.vpser.net域名为例,如上图提示后输入域名/">www.vpser.net域名为例，如上图提示后输入域名</a> <a href="http://www.vpser.net/">www.vpser.net</a> 回车后提示：</p>
</blockquote>
<p><img src="/assets/bl